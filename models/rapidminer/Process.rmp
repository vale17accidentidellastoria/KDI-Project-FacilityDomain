<?xml version="1.0" encoding="UTF-8"?><process version="9.5.001">
  <context>
    <input/>
    <output/>
    <macros/>
  </context>
  <operator activated="true" class="process" compatibility="9.5.001" expanded="true" name="Process">
    <parameter key="logverbosity" value="all"/>
    <parameter key="logfile" value="C:\Users\a_has\Documents\test.log"/>
    <parameter key="resultfile" value="C:\Users\a_has\Documents\res.res"/>
    <parameter key="random_seed" value="2001"/>
    <parameter key="send_mail" value="never"/>
    <parameter key="notification_email" value=""/>
    <parameter key="process_duration_for_mail" value="30"/>
    <parameter key="encoding" value="UTF-8"/>
    <process expanded="true">
      <operator activated="true" class="python_scripting:execute_python" compatibility="9.3.001" expanded="true" height="82" name="trentoToday extract" width="90" x="45" y="136">
        <parameter key="script" value="import pandas as pd&#10;import json&#10;class eventObj:&#10;&#9;def __init__(self, title=&quot;&quot;, category=&quot;&quot;, subCategory=&quot;&quot;, date=&quot;&quot;, time=&quot;&quot;, locationName=&quot;&quot;, locationURL=&quot;&quot;,&#10;&#9;&#9;&#9;&#9; suitableFor=&quot;&quot;, source=&quot;&quot;, description=&quot;&quot;, other=&quot;&quot;, contact=&quot;&quot;, cost=&quot;&quot;, link=&quot;&quot;, subSubCategory=&quot;&quot;):&#10;&#9;&#9;self.source = source&#10;&#9;&#9;self.category = category&#10;&#9;&#9;self.subCategory = subCategory&#10;&#9;&#9;self.subSubCategory = subSubCategory&#10;&#9;&#9;self.suitableFor = suitableFor&#10;&#9;&#9;self.title = title&#10;&#9;&#9;self.date = date&#10;&#9;&#9;self.time = time&#10;&#9;&#9;self.locationName = locationName&#10;&#9;&#9;self.locationURL = locationURL&#10;&#9;&#9;self.description = description&#10;&#9;&#9;self.contact = contact&#10;&#9;&#9;self.cost = cost&#10;&#9;&#9;self.other = other&#10;&#9;&#9;self.link = link&#10;&#10;def rm_main(data):&#10;&#9;culturaEvents = []&#10;&#9;cultura = json.load(data)&#10;&#9;for day in cultura['result']['events']:&#10;&#9;&#9;for eventType in day['tipo_evento']:&#10;&#9;&#9;&#9;for event in eventType['events']:&#10;&#9;&#9;&#9;&#9;subSubCategory = &quot;&quot;&#10;&#9;&#9;&#9;&#9;for subType in event['tipo_evento']:&#10;&#9;&#9;&#9;&#9;&#9;if subType['name'] is not None:&#10;&#9;&#9;&#9;&#9;&#9;&#9;subSubCategory += subType['name'] + &quot;,&quot;&#10;&#9;&#9;&#9;&#9;if len(event['luogo_della_cultura']) == 0:&#10;&#9;&#9;&#9;&#9;&#9;event['luogo_della_cultura'].append({&#10;&#9;&#9;&#9;&#9;&#9;&#9;&quot;name&quot;: &quot;&quot;&#10;&#9;&#9;&#9;&#9;&#9;})&#10;&#9;&#9;&#9;&#9;culturaEvents.append(eventObj(&#10;&#9;&#9;&#9;&#9;&#9;&#9;source=&quot;cultura&quot;,&#10;&#9;&#9;&#9;&#9;&#9;&#9;category=&quot;Cultural&quot;,&#10;&#9;&#9;&#9;&#9;&#9;&#9;subCategory=eventType['name'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;subSubCategory=subSubCategory,&#10;&#9;&#9;&#9;&#9;&#9;&#9;title=event['name'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;link=event['href'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;date=day['day']['identifier'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;time=event['orario_svolgimento'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;locationName=event['comune'][0]['name'] + &quot; --SELF-- &quot; + event['luogo_svolgimento'] + &quot; --SELF-- &quot; +&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9; event['luogo_della_cultura'][0]['name'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;cost=event['costi'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;contact=event['telefono'] + &quot; --SELF-- &quot; + event['email']&#10;&#9;&#9;&#9;&#9;))&#10;&#9;culturaEvents = [ob.__dict__ for ob in culturaEvents]&#10;&#9;js = json.dumps(culturaEvents)&#10;&#9;print(js)&#10;&#9;df = pd.DataFrame(culturaEvents)&#10;&#9;&#10;&#9;return df"/>
        <parameter key="script_file" value="https://raw.githubusercontent.com/vale17accidentidellastoria/KDI-Project-FacilityDomain/master/models/script/extract/trentoTodayE_PRE.py"/>
        <parameter key="notebook_cell_tag_filter" value=""/>
        <parameter key="use_default_python" value="true"/>
        <parameter key="package_manager" value="conda (anaconda)"/>
      </operator>
      <operator activated="true" class="python_scripting:execute_python" compatibility="9.3.001" expanded="true" height="82" name="cultura extract" width="90" x="45" y="442">
        <parameter key="script" value="import pandas as pd&#10;import json&#10;class eventObj:&#10;&#9;def __init__(self, title=&quot;&quot;, category=&quot;&quot;, subCategory=&quot;&quot;, date=&quot;&quot;, time=&quot;&quot;, locationName=&quot;&quot;, locationURL=&quot;&quot;,&#10;&#9;&#9;&#9;&#9; suitableFor=&quot;&quot;, source=&quot;&quot;, description=&quot;&quot;, other=&quot;&quot;, contact=&quot;&quot;, cost=&quot;&quot;, link=&quot;&quot;, subSubCategory=&quot;&quot;):&#10;&#9;&#9;self.source = source&#10;&#9;&#9;self.category = category&#10;&#9;&#9;self.subCategory = subCategory&#10;&#9;&#9;self.subSubCategory = subSubCategory&#10;&#9;&#9;self.suitableFor = suitableFor&#10;&#9;&#9;self.title = title&#10;&#9;&#9;self.date = date&#10;&#9;&#9;self.time = time&#10;&#9;&#9;self.locationName = locationName&#10;&#9;&#9;self.locationURL = locationURL&#10;&#9;&#9;self.description = description&#10;&#9;&#9;self.contact = contact&#10;&#9;&#9;self.cost = cost&#10;&#9;&#9;self.other = other&#10;&#9;&#9;self.link = link&#10;&#10;def rm_main(data):&#10;&#9;culturaEvents = []&#10;&#9;cultura = json.load(data)&#10;&#9;for day in cultura['result']['events']:&#10;&#9;&#9;for eventType in day['tipo_evento']:&#10;&#9;&#9;&#9;for event in eventType['events']:&#10;&#9;&#9;&#9;&#9;subSubCategory = &quot;&quot;&#10;&#9;&#9;&#9;&#9;for subType in event['tipo_evento']:&#10;&#9;&#9;&#9;&#9;&#9;if subType['name'] is not None:&#10;&#9;&#9;&#9;&#9;&#9;&#9;subSubCategory += subType['name'] + &quot;,&quot;&#10;&#9;&#9;&#9;&#9;if len(event['luogo_della_cultura']) == 0:&#10;&#9;&#9;&#9;&#9;&#9;event['luogo_della_cultura'].append({&#10;&#9;&#9;&#9;&#9;&#9;&#9;&quot;name&quot;: &quot;&quot;&#10;&#9;&#9;&#9;&#9;&#9;})&#10;&#9;&#9;&#9;&#9;culturaEvents.append(eventObj(&#10;&#9;&#9;&#9;&#9;&#9;&#9;source=&quot;cultura&quot;,&#10;&#9;&#9;&#9;&#9;&#9;&#9;category=&quot;Cultural&quot;,&#10;&#9;&#9;&#9;&#9;&#9;&#9;subCategory=eventType['name'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;subSubCategory=subSubCategory,&#10;&#9;&#9;&#9;&#9;&#9;&#9;title=event['name'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;link=event['href'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;date=day['day']['identifier'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;time=event['orario_svolgimento'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;locationName=event['comune'][0]['name'] + &quot; --SELF-- &quot; + event['luogo_svolgimento'] + &quot; --SELF-- &quot; +&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9; event['luogo_della_cultura'][0]['name'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;cost=event['costi'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;contact=event['telefono'] + &quot; --SELF-- &quot; + event['email']&#10;&#9;&#9;&#9;&#9;))&#10;&#9;culturaEvents = [ob.__dict__ for ob in culturaEvents]&#10;&#9;js = json.dumps(culturaEvents)&#10;&#9;print(js)&#10;&#9;df = pd.DataFrame(culturaEvents)&#10;&#9;&#10;&#9;return df"/>
        <parameter key="script_file" value="https://raw.githubusercontent.com/vale17accidentidellastoria/KDI-Project-FacilityDomain/master/models/script/extract/cultura_PRE.py"/>
        <parameter key="notebook_cell_tag_filter" value=""/>
        <parameter key="use_default_python" value="true"/>
        <parameter key="package_manager" value="conda (anaconda)"/>
      </operator>
      <operator activated="true" class="python_scripting:execute_python" compatibility="9.3.001" expanded="true" height="103" name="cultura format" width="90" x="179" y="442">
        <parameter key="script" value="import pandas as pd&#10;import json&#10;class eventObj:&#10;&#9;def __init__(self, title=&quot;&quot;, category=&quot;&quot;, subCategory=&quot;&quot;, date=&quot;&quot;, time=&quot;&quot;, locationName=&quot;&quot;, locationURL=&quot;&quot;,&#10;&#9;&#9;&#9;&#9; suitableFor=&quot;&quot;, source=&quot;&quot;, description=&quot;&quot;, other=&quot;&quot;, contact=&quot;&quot;, cost=&quot;&quot;, link=&quot;&quot;, subSubCategory=&quot;&quot;):&#10;&#9;&#9;self.source = source&#10;&#9;&#9;self.category = category&#10;&#9;&#9;self.subCategory = subCategory&#10;&#9;&#9;self.subSubCategory = subSubCategory&#10;&#9;&#9;self.suitableFor = suitableFor&#10;&#9;&#9;self.title = title&#10;&#9;&#9;self.date = date&#10;&#9;&#9;self.time = time&#10;&#9;&#9;self.locationName = locationName&#10;&#9;&#9;self.locationURL = locationURL&#10;&#9;&#9;self.description = description&#10;&#9;&#9;self.contact = contact&#10;&#9;&#9;self.cost = cost&#10;&#9;&#9;self.other = other&#10;&#9;&#9;self.link = link&#10;&#10;def rm_main(data):&#10;&#9;culturaEvents = []&#10;&#9;cultura = json.load(data)&#10;&#9;for day in cultura['result']['events']:&#10;&#9;&#9;for eventType in day['tipo_evento']:&#10;&#9;&#9;&#9;for event in eventType['events']:&#10;&#9;&#9;&#9;&#9;subSubCategory = &quot;&quot;&#10;&#9;&#9;&#9;&#9;for subType in event['tipo_evento']:&#10;&#9;&#9;&#9;&#9;&#9;if subType['name'] is not None:&#10;&#9;&#9;&#9;&#9;&#9;&#9;subSubCategory += subType['name'] + &quot;,&quot;&#10;&#9;&#9;&#9;&#9;if len(event['luogo_della_cultura']) == 0:&#10;&#9;&#9;&#9;&#9;&#9;event['luogo_della_cultura'].append({&#10;&#9;&#9;&#9;&#9;&#9;&#9;&quot;name&quot;: &quot;&quot;&#10;&#9;&#9;&#9;&#9;&#9;})&#10;&#9;&#9;&#9;&#9;culturaEvents.append(eventObj(&#10;&#9;&#9;&#9;&#9;&#9;&#9;source=&quot;cultura&quot;,&#10;&#9;&#9;&#9;&#9;&#9;&#9;category=&quot;Cultural&quot;,&#10;&#9;&#9;&#9;&#9;&#9;&#9;subCategory=eventType['name'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;subSubCategory=subSubCategory,&#10;&#9;&#9;&#9;&#9;&#9;&#9;title=event['name'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;link=event['href'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;date=day['day']['identifier'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;time=event['orario_svolgimento'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;locationName=event['comune'][0]['name'] + &quot; --SELF-- &quot; + event['luogo_svolgimento'] + &quot; --SELF-- &quot; +&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9; event['luogo_della_cultura'][0]['name'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;cost=event['costi'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;contact=event['telefono'] + &quot; --SELF-- &quot; + event['email']&#10;&#9;&#9;&#9;&#9;))&#10;&#9;culturaEvents = [ob.__dict__ for ob in culturaEvents]&#10;&#9;js = json.dumps(culturaEvents)&#10;&#9;print(js)&#10;&#9;df = pd.DataFrame(culturaEvents)&#10;&#9;&#10;&#9;return df"/>
        <parameter key="script_file" value="https://raw.githubusercontent.com/vale17accidentidellastoria/KDI-Project-FacilityDomain/master/models/script/format/cultura_format.py"/>
        <parameter key="notebook_cell_tag_filter" value=""/>
        <parameter key="use_default_python" value="true"/>
        <parameter key="package_manager" value="conda (anaconda)"/>
      </operator>
      <operator activated="true" class="python_scripting:execute_python" compatibility="9.3.001" expanded="true" height="103" name="cultura structure" width="90" x="313" y="442">
        <parameter key="script" value="import pandas as pd&#10;import json&#10;class eventObj:&#10;&#9;def __init__(self, title=&quot;&quot;, category=&quot;&quot;, subCategory=&quot;&quot;, date=&quot;&quot;, time=&quot;&quot;, locationName=&quot;&quot;, locationURL=&quot;&quot;,&#10;&#9;&#9;&#9;&#9; suitableFor=&quot;&quot;, source=&quot;&quot;, description=&quot;&quot;, other=&quot;&quot;, contact=&quot;&quot;, cost=&quot;&quot;, link=&quot;&quot;, subSubCategory=&quot;&quot;):&#10;&#9;&#9;self.source = source&#10;&#9;&#9;self.category = category&#10;&#9;&#9;self.subCategory = subCategory&#10;&#9;&#9;self.subSubCategory = subSubCategory&#10;&#9;&#9;self.suitableFor = suitableFor&#10;&#9;&#9;self.title = title&#10;&#9;&#9;self.date = date&#10;&#9;&#9;self.time = time&#10;&#9;&#9;self.locationName = locationName&#10;&#9;&#9;self.locationURL = locationURL&#10;&#9;&#9;self.description = description&#10;&#9;&#9;self.contact = contact&#10;&#9;&#9;self.cost = cost&#10;&#9;&#9;self.other = other&#10;&#9;&#9;self.link = link&#10;&#10;def rm_main(data):&#10;&#9;culturaEvents = []&#10;&#9;cultura = json.load(data)&#10;&#9;for day in cultura['result']['events']:&#10;&#9;&#9;for eventType in day['tipo_evento']:&#10;&#9;&#9;&#9;for event in eventType['events']:&#10;&#9;&#9;&#9;&#9;subSubCategory = &quot;&quot;&#10;&#9;&#9;&#9;&#9;for subType in event['tipo_evento']:&#10;&#9;&#9;&#9;&#9;&#9;if subType['name'] is not None:&#10;&#9;&#9;&#9;&#9;&#9;&#9;subSubCategory += subType['name'] + &quot;,&quot;&#10;&#9;&#9;&#9;&#9;if len(event['luogo_della_cultura']) == 0:&#10;&#9;&#9;&#9;&#9;&#9;event['luogo_della_cultura'].append({&#10;&#9;&#9;&#9;&#9;&#9;&#9;&quot;name&quot;: &quot;&quot;&#10;&#9;&#9;&#9;&#9;&#9;})&#10;&#9;&#9;&#9;&#9;culturaEvents.append(eventObj(&#10;&#9;&#9;&#9;&#9;&#9;&#9;source=&quot;cultura&quot;,&#10;&#9;&#9;&#9;&#9;&#9;&#9;category=&quot;Cultural&quot;,&#10;&#9;&#9;&#9;&#9;&#9;&#9;subCategory=eventType['name'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;subSubCategory=subSubCategory,&#10;&#9;&#9;&#9;&#9;&#9;&#9;title=event['name'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;link=event['href'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;date=day['day']['identifier'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;time=event['orario_svolgimento'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;locationName=event['comune'][0]['name'] + &quot; --SELF-- &quot; + event['luogo_svolgimento'] + &quot; --SELF-- &quot; +&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9; event['luogo_della_cultura'][0]['name'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;cost=event['costi'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;contact=event['telefono'] + &quot; --SELF-- &quot; + event['email']&#10;&#9;&#9;&#9;&#9;))&#10;&#9;culturaEvents = [ob.__dict__ for ob in culturaEvents]&#10;&#9;js = json.dumps(culturaEvents)&#10;&#9;print(js)&#10;&#9;df = pd.DataFrame(culturaEvents)&#10;&#9;&#10;&#9;return df"/>
        <parameter key="script_file" value="https://raw.githubusercontent.com/vale17accidentidellastoria/KDI-Project-FacilityDomain/master/models/script/structure/cultra.py"/>
        <parameter key="notebook_cell_tag_filter" value=""/>
        <parameter key="use_default_python" value="true"/>
        <parameter key="package_manager" value="conda (anaconda)"/>
      </operator>
      <operator activated="true" class="python_scripting:execute_python" compatibility="9.3.001" expanded="true" height="103" name="trentoToday format" width="90" x="179" y="136">
        <parameter key="script" value="import pandas as pd&#10;import json&#10;class eventObj:&#10;&#9;def __init__(self, title=&quot;&quot;, category=&quot;&quot;, subCategory=&quot;&quot;, date=&quot;&quot;, time=&quot;&quot;, locationName=&quot;&quot;, locationURL=&quot;&quot;,&#10;&#9;&#9;&#9;&#9; suitableFor=&quot;&quot;, source=&quot;&quot;, description=&quot;&quot;, other=&quot;&quot;, contact=&quot;&quot;, cost=&quot;&quot;, link=&quot;&quot;, subSubCategory=&quot;&quot;):&#10;&#9;&#9;self.source = source&#10;&#9;&#9;self.category = category&#10;&#9;&#9;self.subCategory = subCategory&#10;&#9;&#9;self.subSubCategory = subSubCategory&#10;&#9;&#9;self.suitableFor = suitableFor&#10;&#9;&#9;self.title = title&#10;&#9;&#9;self.date = date&#10;&#9;&#9;self.time = time&#10;&#9;&#9;self.locationName = locationName&#10;&#9;&#9;self.locationURL = locationURL&#10;&#9;&#9;self.description = description&#10;&#9;&#9;self.contact = contact&#10;&#9;&#9;self.cost = cost&#10;&#9;&#9;self.other = other&#10;&#9;&#9;self.link = link&#10;&#10;def rm_main(data):&#10;&#9;culturaEvents = []&#10;&#9;cultura = json.load(data)&#10;&#9;for day in cultura['result']['events']:&#10;&#9;&#9;for eventType in day['tipo_evento']:&#10;&#9;&#9;&#9;for event in eventType['events']:&#10;&#9;&#9;&#9;&#9;subSubCategory = &quot;&quot;&#10;&#9;&#9;&#9;&#9;for subType in event['tipo_evento']:&#10;&#9;&#9;&#9;&#9;&#9;if subType['name'] is not None:&#10;&#9;&#9;&#9;&#9;&#9;&#9;subSubCategory += subType['name'] + &quot;,&quot;&#10;&#9;&#9;&#9;&#9;if len(event['luogo_della_cultura']) == 0:&#10;&#9;&#9;&#9;&#9;&#9;event['luogo_della_cultura'].append({&#10;&#9;&#9;&#9;&#9;&#9;&#9;&quot;name&quot;: &quot;&quot;&#10;&#9;&#9;&#9;&#9;&#9;})&#10;&#9;&#9;&#9;&#9;culturaEvents.append(eventObj(&#10;&#9;&#9;&#9;&#9;&#9;&#9;source=&quot;cultura&quot;,&#10;&#9;&#9;&#9;&#9;&#9;&#9;category=&quot;Cultural&quot;,&#10;&#9;&#9;&#9;&#9;&#9;&#9;subCategory=eventType['name'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;subSubCategory=subSubCategory,&#10;&#9;&#9;&#9;&#9;&#9;&#9;title=event['name'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;link=event['href'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;date=day['day']['identifier'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;time=event['orario_svolgimento'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;locationName=event['comune'][0]['name'] + &quot; --SELF-- &quot; + event['luogo_svolgimento'] + &quot; --SELF-- &quot; +&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9; event['luogo_della_cultura'][0]['name'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;cost=event['costi'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;contact=event['telefono'] + &quot; --SELF-- &quot; + event['email']&#10;&#9;&#9;&#9;&#9;))&#10;&#9;culturaEvents = [ob.__dict__ for ob in culturaEvents]&#10;&#9;js = json.dumps(culturaEvents)&#10;&#9;print(js)&#10;&#9;df = pd.DataFrame(culturaEvents)&#10;&#9;&#10;&#9;return df"/>
        <parameter key="script_file" value="https://raw.githubusercontent.com/vale17accidentidellastoria/KDI-Project-FacilityDomain/master/models/script/format/trentoTodayE_format.py"/>
        <parameter key="notebook_cell_tag_filter" value=""/>
        <parameter key="use_default_python" value="true"/>
        <parameter key="package_manager" value="conda (anaconda)"/>
      </operator>
      <operator activated="true" class="python_scripting:execute_python" compatibility="9.3.001" expanded="true" height="103" name="trentoToday structure" width="90" x="313" y="136">
        <parameter key="script" value="import pandas as pd&#10;import json&#10;class eventObj:&#10;&#9;def __init__(self, title=&quot;&quot;, category=&quot;&quot;, subCategory=&quot;&quot;, date=&quot;&quot;, time=&quot;&quot;, locationName=&quot;&quot;, locationURL=&quot;&quot;,&#10;&#9;&#9;&#9;&#9; suitableFor=&quot;&quot;, source=&quot;&quot;, description=&quot;&quot;, other=&quot;&quot;, contact=&quot;&quot;, cost=&quot;&quot;, link=&quot;&quot;, subSubCategory=&quot;&quot;):&#10;&#9;&#9;self.source = source&#10;&#9;&#9;self.category = category&#10;&#9;&#9;self.subCategory = subCategory&#10;&#9;&#9;self.subSubCategory = subSubCategory&#10;&#9;&#9;self.suitableFor = suitableFor&#10;&#9;&#9;self.title = title&#10;&#9;&#9;self.date = date&#10;&#9;&#9;self.time = time&#10;&#9;&#9;self.locationName = locationName&#10;&#9;&#9;self.locationURL = locationURL&#10;&#9;&#9;self.description = description&#10;&#9;&#9;self.contact = contact&#10;&#9;&#9;self.cost = cost&#10;&#9;&#9;self.other = other&#10;&#9;&#9;self.link = link&#10;&#10;def rm_main(data):&#10;&#9;culturaEvents = []&#10;&#9;cultura = json.load(data)&#10;&#9;for day in cultura['result']['events']:&#10;&#9;&#9;for eventType in day['tipo_evento']:&#10;&#9;&#9;&#9;for event in eventType['events']:&#10;&#9;&#9;&#9;&#9;subSubCategory = &quot;&quot;&#10;&#9;&#9;&#9;&#9;for subType in event['tipo_evento']:&#10;&#9;&#9;&#9;&#9;&#9;if subType['name'] is not None:&#10;&#9;&#9;&#9;&#9;&#9;&#9;subSubCategory += subType['name'] + &quot;,&quot;&#10;&#9;&#9;&#9;&#9;if len(event['luogo_della_cultura']) == 0:&#10;&#9;&#9;&#9;&#9;&#9;event['luogo_della_cultura'].append({&#10;&#9;&#9;&#9;&#9;&#9;&#9;&quot;name&quot;: &quot;&quot;&#10;&#9;&#9;&#9;&#9;&#9;})&#10;&#9;&#9;&#9;&#9;culturaEvents.append(eventObj(&#10;&#9;&#9;&#9;&#9;&#9;&#9;source=&quot;cultura&quot;,&#10;&#9;&#9;&#9;&#9;&#9;&#9;category=&quot;Cultural&quot;,&#10;&#9;&#9;&#9;&#9;&#9;&#9;subCategory=eventType['name'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;subSubCategory=subSubCategory,&#10;&#9;&#9;&#9;&#9;&#9;&#9;title=event['name'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;link=event['href'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;date=day['day']['identifier'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;time=event['orario_svolgimento'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;locationName=event['comune'][0]['name'] + &quot; --SELF-- &quot; + event['luogo_svolgimento'] + &quot; --SELF-- &quot; +&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9; event['luogo_della_cultura'][0]['name'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;cost=event['costi'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;contact=event['telefono'] + &quot; --SELF-- &quot; + event['email']&#10;&#9;&#9;&#9;&#9;))&#10;&#9;culturaEvents = [ob.__dict__ for ob in culturaEvents]&#10;&#9;js = json.dumps(culturaEvents)&#10;&#9;print(js)&#10;&#9;df = pd.DataFrame(culturaEvents)&#10;&#9;&#10;&#9;return df"/>
        <parameter key="script_file" value="https://raw.githubusercontent.com/vale17accidentidellastoria/KDI-Project-FacilityDomain/master/models/script/structure/trentoTodayE.py"/>
        <parameter key="notebook_cell_tag_filter" value=""/>
        <parameter key="use_default_python" value="true"/>
        <parameter key="package_manager" value="conda (anaconda)"/>
      </operator>
      <operator activated="true" class="python_scripting:execute_python" compatibility="9.3.001" expanded="true" height="82" name="visitTrentino extract" width="90" x="45" y="340">
        <parameter key="script" value="import pandas as pd&#10;import json&#10;class eventObj:&#10;&#9;def __init__(self, title=&quot;&quot;, category=&quot;&quot;, subCategory=&quot;&quot;, date=&quot;&quot;, time=&quot;&quot;, locationName=&quot;&quot;, locationURL=&quot;&quot;,&#10;&#9;&#9;&#9;&#9; suitableFor=&quot;&quot;, source=&quot;&quot;, description=&quot;&quot;, other=&quot;&quot;, contact=&quot;&quot;, cost=&quot;&quot;, link=&quot;&quot;, subSubCategory=&quot;&quot;):&#10;&#9;&#9;self.source = source&#10;&#9;&#9;self.category = category&#10;&#9;&#9;self.subCategory = subCategory&#10;&#9;&#9;self.subSubCategory = subSubCategory&#10;&#9;&#9;self.suitableFor = suitableFor&#10;&#9;&#9;self.title = title&#10;&#9;&#9;self.date = date&#10;&#9;&#9;self.time = time&#10;&#9;&#9;self.locationName = locationName&#10;&#9;&#9;self.locationURL = locationURL&#10;&#9;&#9;self.description = description&#10;&#9;&#9;self.contact = contact&#10;&#9;&#9;self.cost = cost&#10;&#9;&#9;self.other = other&#10;&#9;&#9;self.link = link&#10;&#10;def rm_main(data):&#10;&#9;culturaEvents = []&#10;&#9;cultura = json.load(data)&#10;&#9;for day in cultura['result']['events']:&#10;&#9;&#9;for eventType in day['tipo_evento']:&#10;&#9;&#9;&#9;for event in eventType['events']:&#10;&#9;&#9;&#9;&#9;subSubCategory = &quot;&quot;&#10;&#9;&#9;&#9;&#9;for subType in event['tipo_evento']:&#10;&#9;&#9;&#9;&#9;&#9;if subType['name'] is not None:&#10;&#9;&#9;&#9;&#9;&#9;&#9;subSubCategory += subType['name'] + &quot;,&quot;&#10;&#9;&#9;&#9;&#9;if len(event['luogo_della_cultura']) == 0:&#10;&#9;&#9;&#9;&#9;&#9;event['luogo_della_cultura'].append({&#10;&#9;&#9;&#9;&#9;&#9;&#9;&quot;name&quot;: &quot;&quot;&#10;&#9;&#9;&#9;&#9;&#9;})&#10;&#9;&#9;&#9;&#9;culturaEvents.append(eventObj(&#10;&#9;&#9;&#9;&#9;&#9;&#9;source=&quot;cultura&quot;,&#10;&#9;&#9;&#9;&#9;&#9;&#9;category=&quot;Cultural&quot;,&#10;&#9;&#9;&#9;&#9;&#9;&#9;subCategory=eventType['name'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;subSubCategory=subSubCategory,&#10;&#9;&#9;&#9;&#9;&#9;&#9;title=event['name'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;link=event['href'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;date=day['day']['identifier'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;time=event['orario_svolgimento'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;locationName=event['comune'][0]['name'] + &quot; --SELF-- &quot; + event['luogo_svolgimento'] + &quot; --SELF-- &quot; +&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9; event['luogo_della_cultura'][0]['name'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;cost=event['costi'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;contact=event['telefono'] + &quot; --SELF-- &quot; + event['email']&#10;&#9;&#9;&#9;&#9;))&#10;&#9;culturaEvents = [ob.__dict__ for ob in culturaEvents]&#10;&#9;js = json.dumps(culturaEvents)&#10;&#9;print(js)&#10;&#9;df = pd.DataFrame(culturaEvents)&#10;&#9;&#10;&#9;return df"/>
        <parameter key="script_file" value="https://raw.githubusercontent.com/vale17accidentidellastoria/KDI-Project-FacilityDomain/master/models/script/extract/visitTrentino_PRE.py"/>
        <parameter key="notebook_cell_tag_filter" value=""/>
        <parameter key="use_default_python" value="true"/>
        <parameter key="package_manager" value="conda (anaconda)"/>
      </operator>
      <operator activated="true" class="python_scripting:execute_python" compatibility="9.3.001" expanded="true" height="103" name="visitTrentino format" width="90" x="179" y="340">
        <parameter key="script" value="import pandas as pd&#10;import json&#10;class eventObj:&#10;&#9;def __init__(self, title=&quot;&quot;, category=&quot;&quot;, subCategory=&quot;&quot;, date=&quot;&quot;, time=&quot;&quot;, locationName=&quot;&quot;, locationURL=&quot;&quot;,&#10;&#9;&#9;&#9;&#9; suitableFor=&quot;&quot;, source=&quot;&quot;, description=&quot;&quot;, other=&quot;&quot;, contact=&quot;&quot;, cost=&quot;&quot;, link=&quot;&quot;, subSubCategory=&quot;&quot;):&#10;&#9;&#9;self.source = source&#10;&#9;&#9;self.category = category&#10;&#9;&#9;self.subCategory = subCategory&#10;&#9;&#9;self.subSubCategory = subSubCategory&#10;&#9;&#9;self.suitableFor = suitableFor&#10;&#9;&#9;self.title = title&#10;&#9;&#9;self.date = date&#10;&#9;&#9;self.time = time&#10;&#9;&#9;self.locationName = locationName&#10;&#9;&#9;self.locationURL = locationURL&#10;&#9;&#9;self.description = description&#10;&#9;&#9;self.contact = contact&#10;&#9;&#9;self.cost = cost&#10;&#9;&#9;self.other = other&#10;&#9;&#9;self.link = link&#10;&#10;def rm_main(data):&#10;&#9;culturaEvents = []&#10;&#9;cultura = json.load(data)&#10;&#9;for day in cultura['result']['events']:&#10;&#9;&#9;for eventType in day['tipo_evento']:&#10;&#9;&#9;&#9;for event in eventType['events']:&#10;&#9;&#9;&#9;&#9;subSubCategory = &quot;&quot;&#10;&#9;&#9;&#9;&#9;for subType in event['tipo_evento']:&#10;&#9;&#9;&#9;&#9;&#9;if subType['name'] is not None:&#10;&#9;&#9;&#9;&#9;&#9;&#9;subSubCategory += subType['name'] + &quot;,&quot;&#10;&#9;&#9;&#9;&#9;if len(event['luogo_della_cultura']) == 0:&#10;&#9;&#9;&#9;&#9;&#9;event['luogo_della_cultura'].append({&#10;&#9;&#9;&#9;&#9;&#9;&#9;&quot;name&quot;: &quot;&quot;&#10;&#9;&#9;&#9;&#9;&#9;})&#10;&#9;&#9;&#9;&#9;culturaEvents.append(eventObj(&#10;&#9;&#9;&#9;&#9;&#9;&#9;source=&quot;cultura&quot;,&#10;&#9;&#9;&#9;&#9;&#9;&#9;category=&quot;Cultural&quot;,&#10;&#9;&#9;&#9;&#9;&#9;&#9;subCategory=eventType['name'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;subSubCategory=subSubCategory,&#10;&#9;&#9;&#9;&#9;&#9;&#9;title=event['name'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;link=event['href'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;date=day['day']['identifier'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;time=event['orario_svolgimento'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;locationName=event['comune'][0]['name'] + &quot; --SELF-- &quot; + event['luogo_svolgimento'] + &quot; --SELF-- &quot; +&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9; event['luogo_della_cultura'][0]['name'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;cost=event['costi'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;contact=event['telefono'] + &quot; --SELF-- &quot; + event['email']&#10;&#9;&#9;&#9;&#9;))&#10;&#9;culturaEvents = [ob.__dict__ for ob in culturaEvents]&#10;&#9;js = json.dumps(culturaEvents)&#10;&#9;print(js)&#10;&#9;df = pd.DataFrame(culturaEvents)&#10;&#9;&#10;&#9;return df"/>
        <parameter key="script_file" value="https://raw.githubusercontent.com/vale17accidentidellastoria/KDI-Project-FacilityDomain/master/models/script/format/visitTrentino_format.py"/>
        <parameter key="notebook_cell_tag_filter" value=""/>
        <parameter key="use_default_python" value="true"/>
        <parameter key="package_manager" value="conda (anaconda)"/>
      </operator>
      <operator activated="true" class="python_scripting:execute_python" compatibility="9.3.001" expanded="true" height="103" name="visitTrentino structure" width="90" x="313" y="340">
        <parameter key="script" value="import pandas as pd&#10;import json&#10;class eventObj:&#10;&#9;def __init__(self, title=&quot;&quot;, category=&quot;&quot;, subCategory=&quot;&quot;, date=&quot;&quot;, time=&quot;&quot;, locationName=&quot;&quot;, locationURL=&quot;&quot;,&#10;&#9;&#9;&#9;&#9; suitableFor=&quot;&quot;, source=&quot;&quot;, description=&quot;&quot;, other=&quot;&quot;, contact=&quot;&quot;, cost=&quot;&quot;, link=&quot;&quot;, subSubCategory=&quot;&quot;):&#10;&#9;&#9;self.source = source&#10;&#9;&#9;self.category = category&#10;&#9;&#9;self.subCategory = subCategory&#10;&#9;&#9;self.subSubCategory = subSubCategory&#10;&#9;&#9;self.suitableFor = suitableFor&#10;&#9;&#9;self.title = title&#10;&#9;&#9;self.date = date&#10;&#9;&#9;self.time = time&#10;&#9;&#9;self.locationName = locationName&#10;&#9;&#9;self.locationURL = locationURL&#10;&#9;&#9;self.description = description&#10;&#9;&#9;self.contact = contact&#10;&#9;&#9;self.cost = cost&#10;&#9;&#9;self.other = other&#10;&#9;&#9;self.link = link&#10;&#10;def rm_main(data):&#10;&#9;culturaEvents = []&#10;&#9;cultura = json.load(data)&#10;&#9;for day in cultura['result']['events']:&#10;&#9;&#9;for eventType in day['tipo_evento']:&#10;&#9;&#9;&#9;for event in eventType['events']:&#10;&#9;&#9;&#9;&#9;subSubCategory = &quot;&quot;&#10;&#9;&#9;&#9;&#9;for subType in event['tipo_evento']:&#10;&#9;&#9;&#9;&#9;&#9;if subType['name'] is not None:&#10;&#9;&#9;&#9;&#9;&#9;&#9;subSubCategory += subType['name'] + &quot;,&quot;&#10;&#9;&#9;&#9;&#9;if len(event['luogo_della_cultura']) == 0:&#10;&#9;&#9;&#9;&#9;&#9;event['luogo_della_cultura'].append({&#10;&#9;&#9;&#9;&#9;&#9;&#9;&quot;name&quot;: &quot;&quot;&#10;&#9;&#9;&#9;&#9;&#9;})&#10;&#9;&#9;&#9;&#9;culturaEvents.append(eventObj(&#10;&#9;&#9;&#9;&#9;&#9;&#9;source=&quot;cultura&quot;,&#10;&#9;&#9;&#9;&#9;&#9;&#9;category=&quot;Cultural&quot;,&#10;&#9;&#9;&#9;&#9;&#9;&#9;subCategory=eventType['name'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;subSubCategory=subSubCategory,&#10;&#9;&#9;&#9;&#9;&#9;&#9;title=event['name'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;link=event['href'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;date=day['day']['identifier'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;time=event['orario_svolgimento'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;locationName=event['comune'][0]['name'] + &quot; --SELF-- &quot; + event['luogo_svolgimento'] + &quot; --SELF-- &quot; +&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9; event['luogo_della_cultura'][0]['name'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;cost=event['costi'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;contact=event['telefono'] + &quot; --SELF-- &quot; + event['email']&#10;&#9;&#9;&#9;&#9;))&#10;&#9;culturaEvents = [ob.__dict__ for ob in culturaEvents]&#10;&#9;js = json.dumps(culturaEvents)&#10;&#9;print(js)&#10;&#9;df = pd.DataFrame(culturaEvents)&#10;&#9;&#10;&#9;return df"/>
        <parameter key="script_file" value="https://raw.githubusercontent.com/vale17accidentidellastoria/KDI-Project-FacilityDomain/master/models/script/structure/visitTrentino.py"/>
        <parameter key="notebook_cell_tag_filter" value=""/>
        <parameter key="use_default_python" value="true"/>
        <parameter key="package_manager" value="conda (anaconda)"/>
      </operator>
      <operator activated="true" class="python_scripting:execute_python" compatibility="9.3.001" expanded="true" height="82" name="cinemaRovereto extract" width="90" x="45" y="544">
        <parameter key="script" value="import pandas as pd&#10;import json&#10;class eventObj:&#10;&#9;def __init__(self, title=&quot;&quot;, category=&quot;&quot;, subCategory=&quot;&quot;, date=&quot;&quot;, time=&quot;&quot;, locationName=&quot;&quot;, locationURL=&quot;&quot;,&#10;&#9;&#9;&#9;&#9; suitableFor=&quot;&quot;, source=&quot;&quot;, description=&quot;&quot;, other=&quot;&quot;, contact=&quot;&quot;, cost=&quot;&quot;, link=&quot;&quot;, subSubCategory=&quot;&quot;):&#10;&#9;&#9;self.source = source&#10;&#9;&#9;self.category = category&#10;&#9;&#9;self.subCategory = subCategory&#10;&#9;&#9;self.subSubCategory = subSubCategory&#10;&#9;&#9;self.suitableFor = suitableFor&#10;&#9;&#9;self.title = title&#10;&#9;&#9;self.date = date&#10;&#9;&#9;self.time = time&#10;&#9;&#9;self.locationName = locationName&#10;&#9;&#9;self.locationURL = locationURL&#10;&#9;&#9;self.description = description&#10;&#9;&#9;self.contact = contact&#10;&#9;&#9;self.cost = cost&#10;&#9;&#9;self.other = other&#10;&#9;&#9;self.link = link&#10;&#10;def rm_main(data):&#10;&#9;culturaEvents = []&#10;&#9;cultura = json.load(data)&#10;&#9;for day in cultura['result']['events']:&#10;&#9;&#9;for eventType in day['tipo_evento']:&#10;&#9;&#9;&#9;for event in eventType['events']:&#10;&#9;&#9;&#9;&#9;subSubCategory = &quot;&quot;&#10;&#9;&#9;&#9;&#9;for subType in event['tipo_evento']:&#10;&#9;&#9;&#9;&#9;&#9;if subType['name'] is not None:&#10;&#9;&#9;&#9;&#9;&#9;&#9;subSubCategory += subType['name'] + &quot;,&quot;&#10;&#9;&#9;&#9;&#9;if len(event['luogo_della_cultura']) == 0:&#10;&#9;&#9;&#9;&#9;&#9;event['luogo_della_cultura'].append({&#10;&#9;&#9;&#9;&#9;&#9;&#9;&quot;name&quot;: &quot;&quot;&#10;&#9;&#9;&#9;&#9;&#9;})&#10;&#9;&#9;&#9;&#9;culturaEvents.append(eventObj(&#10;&#9;&#9;&#9;&#9;&#9;&#9;source=&quot;cultura&quot;,&#10;&#9;&#9;&#9;&#9;&#9;&#9;category=&quot;Cultural&quot;,&#10;&#9;&#9;&#9;&#9;&#9;&#9;subCategory=eventType['name'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;subSubCategory=subSubCategory,&#10;&#9;&#9;&#9;&#9;&#9;&#9;title=event['name'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;link=event['href'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;date=day['day']['identifier'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;time=event['orario_svolgimento'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;locationName=event['comune'][0]['name'] + &quot; --SELF-- &quot; + event['luogo_svolgimento'] + &quot; --SELF-- &quot; +&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9; event['luogo_della_cultura'][0]['name'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;cost=event['costi'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;contact=event['telefono'] + &quot; --SELF-- &quot; + event['email']&#10;&#9;&#9;&#9;&#9;))&#10;&#9;culturaEvents = [ob.__dict__ for ob in culturaEvents]&#10;&#9;js = json.dumps(culturaEvents)&#10;&#9;print(js)&#10;&#9;df = pd.DataFrame(culturaEvents)&#10;&#9;&#10;&#9;return df"/>
        <parameter key="script_file" value="https://raw.githubusercontent.com/vale17accidentidellastoria/KDI-Project-FacilityDomain/master/models/script/extract/cinemaRovereto_PRE.py"/>
        <parameter key="notebook_cell_tag_filter" value=""/>
        <parameter key="use_default_python" value="true"/>
        <parameter key="package_manager" value="conda (anaconda)"/>
      </operator>
      <operator activated="true" class="python_scripting:execute_python" compatibility="9.3.001" expanded="true" height="103" name="cinemaRovereto format" width="90" x="179" y="544">
        <parameter key="script" value="import pandas as pd&#10;import json&#10;class eventObj:&#10;&#9;def __init__(self, title=&quot;&quot;, category=&quot;&quot;, subCategory=&quot;&quot;, date=&quot;&quot;, time=&quot;&quot;, locationName=&quot;&quot;, locationURL=&quot;&quot;,&#10;&#9;&#9;&#9;&#9; suitableFor=&quot;&quot;, source=&quot;&quot;, description=&quot;&quot;, other=&quot;&quot;, contact=&quot;&quot;, cost=&quot;&quot;, link=&quot;&quot;, subSubCategory=&quot;&quot;):&#10;&#9;&#9;self.source = source&#10;&#9;&#9;self.category = category&#10;&#9;&#9;self.subCategory = subCategory&#10;&#9;&#9;self.subSubCategory = subSubCategory&#10;&#9;&#9;self.suitableFor = suitableFor&#10;&#9;&#9;self.title = title&#10;&#9;&#9;self.date = date&#10;&#9;&#9;self.time = time&#10;&#9;&#9;self.locationName = locationName&#10;&#9;&#9;self.locationURL = locationURL&#10;&#9;&#9;self.description = description&#10;&#9;&#9;self.contact = contact&#10;&#9;&#9;self.cost = cost&#10;&#9;&#9;self.other = other&#10;&#9;&#9;self.link = link&#10;&#10;def rm_main(data):&#10;&#9;culturaEvents = []&#10;&#9;cultura = json.load(data)&#10;&#9;for day in cultura['result']['events']:&#10;&#9;&#9;for eventType in day['tipo_evento']:&#10;&#9;&#9;&#9;for event in eventType['events']:&#10;&#9;&#9;&#9;&#9;subSubCategory = &quot;&quot;&#10;&#9;&#9;&#9;&#9;for subType in event['tipo_evento']:&#10;&#9;&#9;&#9;&#9;&#9;if subType['name'] is not None:&#10;&#9;&#9;&#9;&#9;&#9;&#9;subSubCategory += subType['name'] + &quot;,&quot;&#10;&#9;&#9;&#9;&#9;if len(event['luogo_della_cultura']) == 0:&#10;&#9;&#9;&#9;&#9;&#9;event['luogo_della_cultura'].append({&#10;&#9;&#9;&#9;&#9;&#9;&#9;&quot;name&quot;: &quot;&quot;&#10;&#9;&#9;&#9;&#9;&#9;})&#10;&#9;&#9;&#9;&#9;culturaEvents.append(eventObj(&#10;&#9;&#9;&#9;&#9;&#9;&#9;source=&quot;cultura&quot;,&#10;&#9;&#9;&#9;&#9;&#9;&#9;category=&quot;Cultural&quot;,&#10;&#9;&#9;&#9;&#9;&#9;&#9;subCategory=eventType['name'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;subSubCategory=subSubCategory,&#10;&#9;&#9;&#9;&#9;&#9;&#9;title=event['name'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;link=event['href'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;date=day['day']['identifier'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;time=event['orario_svolgimento'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;locationName=event['comune'][0]['name'] + &quot; --SELF-- &quot; + event['luogo_svolgimento'] + &quot; --SELF-- &quot; +&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9; event['luogo_della_cultura'][0]['name'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;cost=event['costi'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;contact=event['telefono'] + &quot; --SELF-- &quot; + event['email']&#10;&#9;&#9;&#9;&#9;))&#10;&#9;culturaEvents = [ob.__dict__ for ob in culturaEvents]&#10;&#9;js = json.dumps(culturaEvents)&#10;&#9;print(js)&#10;&#9;df = pd.DataFrame(culturaEvents)&#10;&#9;&#10;&#9;return df"/>
        <parameter key="script_file" value="https://raw.githubusercontent.com/vale17accidentidellastoria/KDI-Project-FacilityDomain/master/models/script/format/cinemaRovereto_format.py"/>
        <parameter key="notebook_cell_tag_filter" value=""/>
        <parameter key="use_default_python" value="true"/>
        <parameter key="package_manager" value="conda (anaconda)"/>
      </operator>
      <operator activated="true" class="python_scripting:execute_python" compatibility="9.3.001" expanded="true" height="103" name="cinemaRovereto details" width="90" x="313" y="544">
        <parameter key="script" value="import pandas as pd&#10;import json&#10;class eventObj:&#10;&#9;def __init__(self, title=&quot;&quot;, category=&quot;&quot;, subCategory=&quot;&quot;, date=&quot;&quot;, time=&quot;&quot;, locationName=&quot;&quot;, locationURL=&quot;&quot;,&#10;&#9;&#9;&#9;&#9; suitableFor=&quot;&quot;, source=&quot;&quot;, description=&quot;&quot;, other=&quot;&quot;, contact=&quot;&quot;, cost=&quot;&quot;, link=&quot;&quot;, subSubCategory=&quot;&quot;):&#10;&#9;&#9;self.source = source&#10;&#9;&#9;self.category = category&#10;&#9;&#9;self.subCategory = subCategory&#10;&#9;&#9;self.subSubCategory = subSubCategory&#10;&#9;&#9;self.suitableFor = suitableFor&#10;&#9;&#9;self.title = title&#10;&#9;&#9;self.date = date&#10;&#9;&#9;self.time = time&#10;&#9;&#9;self.locationName = locationName&#10;&#9;&#9;self.locationURL = locationURL&#10;&#9;&#9;self.description = description&#10;&#9;&#9;self.contact = contact&#10;&#9;&#9;self.cost = cost&#10;&#9;&#9;self.other = other&#10;&#9;&#9;self.link = link&#10;&#10;def rm_main(data):&#10;&#9;culturaEvents = []&#10;&#9;cultura = json.load(data)&#10;&#9;for day in cultura['result']['events']:&#10;&#9;&#9;for eventType in day['tipo_evento']:&#10;&#9;&#9;&#9;for event in eventType['events']:&#10;&#9;&#9;&#9;&#9;subSubCategory = &quot;&quot;&#10;&#9;&#9;&#9;&#9;for subType in event['tipo_evento']:&#10;&#9;&#9;&#9;&#9;&#9;if subType['name'] is not None:&#10;&#9;&#9;&#9;&#9;&#9;&#9;subSubCategory += subType['name'] + &quot;,&quot;&#10;&#9;&#9;&#9;&#9;if len(event['luogo_della_cultura']) == 0:&#10;&#9;&#9;&#9;&#9;&#9;event['luogo_della_cultura'].append({&#10;&#9;&#9;&#9;&#9;&#9;&#9;&quot;name&quot;: &quot;&quot;&#10;&#9;&#9;&#9;&#9;&#9;})&#10;&#9;&#9;&#9;&#9;culturaEvents.append(eventObj(&#10;&#9;&#9;&#9;&#9;&#9;&#9;source=&quot;cultura&quot;,&#10;&#9;&#9;&#9;&#9;&#9;&#9;category=&quot;Cultural&quot;,&#10;&#9;&#9;&#9;&#9;&#9;&#9;subCategory=eventType['name'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;subSubCategory=subSubCategory,&#10;&#9;&#9;&#9;&#9;&#9;&#9;title=event['name'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;link=event['href'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;date=day['day']['identifier'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;time=event['orario_svolgimento'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;locationName=event['comune'][0]['name'] + &quot; --SELF-- &quot; + event['luogo_svolgimento'] + &quot; --SELF-- &quot; +&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9; event['luogo_della_cultura'][0]['name'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;cost=event['costi'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;contact=event['telefono'] + &quot; --SELF-- &quot; + event['email']&#10;&#9;&#9;&#9;&#9;))&#10;&#9;culturaEvents = [ob.__dict__ for ob in culturaEvents]&#10;&#9;js = json.dumps(culturaEvents)&#10;&#9;print(js)&#10;&#9;df = pd.DataFrame(culturaEvents)&#10;&#9;&#10;&#9;return df"/>
        <parameter key="script_file" value="https://raw.githubusercontent.com/vale17accidentidellastoria/KDI-Project-FacilityDomain/master/models/script/movieDetails/cinemaRoveretoDetails.py"/>
        <parameter key="notebook_cell_tag_filter" value=""/>
        <parameter key="use_default_python" value="true"/>
        <parameter key="package_manager" value="conda (anaconda)"/>
      </operator>
      <operator activated="true" class="python_scripting:execute_python" compatibility="9.3.001" expanded="true" height="103" name="cinemaRovereto structure" width="90" x="447" y="544">
        <parameter key="script" value="import pandas as pd&#10;import json&#10;class eventObj:&#10;&#9;def __init__(self, title=&quot;&quot;, category=&quot;&quot;, subCategory=&quot;&quot;, date=&quot;&quot;, time=&quot;&quot;, locationName=&quot;&quot;, locationURL=&quot;&quot;,&#10;&#9;&#9;&#9;&#9; suitableFor=&quot;&quot;, source=&quot;&quot;, description=&quot;&quot;, other=&quot;&quot;, contact=&quot;&quot;, cost=&quot;&quot;, link=&quot;&quot;, subSubCategory=&quot;&quot;):&#10;&#9;&#9;self.source = source&#10;&#9;&#9;self.category = category&#10;&#9;&#9;self.subCategory = subCategory&#10;&#9;&#9;self.subSubCategory = subSubCategory&#10;&#9;&#9;self.suitableFor = suitableFor&#10;&#9;&#9;self.title = title&#10;&#9;&#9;self.date = date&#10;&#9;&#9;self.time = time&#10;&#9;&#9;self.locationName = locationName&#10;&#9;&#9;self.locationURL = locationURL&#10;&#9;&#9;self.description = description&#10;&#9;&#9;self.contact = contact&#10;&#9;&#9;self.cost = cost&#10;&#9;&#9;self.other = other&#10;&#9;&#9;self.link = link&#10;&#10;def rm_main(data):&#10;&#9;culturaEvents = []&#10;&#9;cultura = json.load(data)&#10;&#9;for day in cultura['result']['events']:&#10;&#9;&#9;for eventType in day['tipo_evento']:&#10;&#9;&#9;&#9;for event in eventType['events']:&#10;&#9;&#9;&#9;&#9;subSubCategory = &quot;&quot;&#10;&#9;&#9;&#9;&#9;for subType in event['tipo_evento']:&#10;&#9;&#9;&#9;&#9;&#9;if subType['name'] is not None:&#10;&#9;&#9;&#9;&#9;&#9;&#9;subSubCategory += subType['name'] + &quot;,&quot;&#10;&#9;&#9;&#9;&#9;if len(event['luogo_della_cultura']) == 0:&#10;&#9;&#9;&#9;&#9;&#9;event['luogo_della_cultura'].append({&#10;&#9;&#9;&#9;&#9;&#9;&#9;&quot;name&quot;: &quot;&quot;&#10;&#9;&#9;&#9;&#9;&#9;})&#10;&#9;&#9;&#9;&#9;culturaEvents.append(eventObj(&#10;&#9;&#9;&#9;&#9;&#9;&#9;source=&quot;cultura&quot;,&#10;&#9;&#9;&#9;&#9;&#9;&#9;category=&quot;Cultural&quot;,&#10;&#9;&#9;&#9;&#9;&#9;&#9;subCategory=eventType['name'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;subSubCategory=subSubCategory,&#10;&#9;&#9;&#9;&#9;&#9;&#9;title=event['name'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;link=event['href'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;date=day['day']['identifier'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;time=event['orario_svolgimento'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;locationName=event['comune'][0]['name'] + &quot; --SELF-- &quot; + event['luogo_svolgimento'] + &quot; --SELF-- &quot; +&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9; event['luogo_della_cultura'][0]['name'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;cost=event['costi'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;contact=event['telefono'] + &quot; --SELF-- &quot; + event['email']&#10;&#9;&#9;&#9;&#9;))&#10;&#9;culturaEvents = [ob.__dict__ for ob in culturaEvents]&#10;&#9;js = json.dumps(culturaEvents)&#10;&#9;print(js)&#10;&#9;df = pd.DataFrame(culturaEvents)&#10;&#9;&#10;&#9;return df"/>
        <parameter key="script_file" value="https://raw.githubusercontent.com/vale17accidentidellastoria/KDI-Project-FacilityDomain/master/models/script/structure/cinemaRovereto.py"/>
        <parameter key="notebook_cell_tag_filter" value=""/>
        <parameter key="use_default_python" value="true"/>
        <parameter key="package_manager" value="conda (anaconda)"/>
      </operator>
      <operator activated="true" class="python_scripting:execute_python" compatibility="9.3.001" expanded="true" height="82" name="cinemaTrento extract" width="90" x="45" y="646">
        <parameter key="script" value="import pandas as pd&#10;import json&#10;class eventObj:&#10;&#9;def __init__(self, title=&quot;&quot;, category=&quot;&quot;, subCategory=&quot;&quot;, date=&quot;&quot;, time=&quot;&quot;, locationName=&quot;&quot;, locationURL=&quot;&quot;,&#10;&#9;&#9;&#9;&#9; suitableFor=&quot;&quot;, source=&quot;&quot;, description=&quot;&quot;, other=&quot;&quot;, contact=&quot;&quot;, cost=&quot;&quot;, link=&quot;&quot;, subSubCategory=&quot;&quot;):&#10;&#9;&#9;self.source = source&#10;&#9;&#9;self.category = category&#10;&#9;&#9;self.subCategory = subCategory&#10;&#9;&#9;self.subSubCategory = subSubCategory&#10;&#9;&#9;self.suitableFor = suitableFor&#10;&#9;&#9;self.title = title&#10;&#9;&#9;self.date = date&#10;&#9;&#9;self.time = time&#10;&#9;&#9;self.locationName = locationName&#10;&#9;&#9;self.locationURL = locationURL&#10;&#9;&#9;self.description = description&#10;&#9;&#9;self.contact = contact&#10;&#9;&#9;self.cost = cost&#10;&#9;&#9;self.other = other&#10;&#9;&#9;self.link = link&#10;&#10;def rm_main(data):&#10;&#9;culturaEvents = []&#10;&#9;cultura = json.load(data)&#10;&#9;for day in cultura['result']['events']:&#10;&#9;&#9;for eventType in day['tipo_evento']:&#10;&#9;&#9;&#9;for event in eventType['events']:&#10;&#9;&#9;&#9;&#9;subSubCategory = &quot;&quot;&#10;&#9;&#9;&#9;&#9;for subType in event['tipo_evento']:&#10;&#9;&#9;&#9;&#9;&#9;if subType['name'] is not None:&#10;&#9;&#9;&#9;&#9;&#9;&#9;subSubCategory += subType['name'] + &quot;,&quot;&#10;&#9;&#9;&#9;&#9;if len(event['luogo_della_cultura']) == 0:&#10;&#9;&#9;&#9;&#9;&#9;event['luogo_della_cultura'].append({&#10;&#9;&#9;&#9;&#9;&#9;&#9;&quot;name&quot;: &quot;&quot;&#10;&#9;&#9;&#9;&#9;&#9;})&#10;&#9;&#9;&#9;&#9;culturaEvents.append(eventObj(&#10;&#9;&#9;&#9;&#9;&#9;&#9;source=&quot;cultura&quot;,&#10;&#9;&#9;&#9;&#9;&#9;&#9;category=&quot;Cultural&quot;,&#10;&#9;&#9;&#9;&#9;&#9;&#9;subCategory=eventType['name'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;subSubCategory=subSubCategory,&#10;&#9;&#9;&#9;&#9;&#9;&#9;title=event['name'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;link=event['href'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;date=day['day']['identifier'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;time=event['orario_svolgimento'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;locationName=event['comune'][0]['name'] + &quot; --SELF-- &quot; + event['luogo_svolgimento'] + &quot; --SELF-- &quot; +&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9; event['luogo_della_cultura'][0]['name'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;cost=event['costi'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;contact=event['telefono'] + &quot; --SELF-- &quot; + event['email']&#10;&#9;&#9;&#9;&#9;))&#10;&#9;culturaEvents = [ob.__dict__ for ob in culturaEvents]&#10;&#9;js = json.dumps(culturaEvents)&#10;&#9;print(js)&#10;&#9;df = pd.DataFrame(culturaEvents)&#10;&#9;&#10;&#9;return df"/>
        <parameter key="script_file" value="https://raw.githubusercontent.com/vale17accidentidellastoria/KDI-Project-FacilityDomain/master/models/script/extract/cineworldTrento_PRE.py"/>
        <parameter key="notebook_cell_tag_filter" value=""/>
        <parameter key="use_default_python" value="true"/>
        <parameter key="package_manager" value="conda (anaconda)"/>
      </operator>
      <operator activated="true" class="python_scripting:execute_python" compatibility="9.3.001" expanded="true" height="103" name="cinemaTrento format" width="90" x="179" y="646">
        <parameter key="script" value="import pandas as pd&#10;import json&#10;class eventObj:&#10;&#9;def __init__(self, title=&quot;&quot;, category=&quot;&quot;, subCategory=&quot;&quot;, date=&quot;&quot;, time=&quot;&quot;, locationName=&quot;&quot;, locationURL=&quot;&quot;,&#10;&#9;&#9;&#9;&#9; suitableFor=&quot;&quot;, source=&quot;&quot;, description=&quot;&quot;, other=&quot;&quot;, contact=&quot;&quot;, cost=&quot;&quot;, link=&quot;&quot;, subSubCategory=&quot;&quot;):&#10;&#9;&#9;self.source = source&#10;&#9;&#9;self.category = category&#10;&#9;&#9;self.subCategory = subCategory&#10;&#9;&#9;self.subSubCategory = subSubCategory&#10;&#9;&#9;self.suitableFor = suitableFor&#10;&#9;&#9;self.title = title&#10;&#9;&#9;self.date = date&#10;&#9;&#9;self.time = time&#10;&#9;&#9;self.locationName = locationName&#10;&#9;&#9;self.locationURL = locationURL&#10;&#9;&#9;self.description = description&#10;&#9;&#9;self.contact = contact&#10;&#9;&#9;self.cost = cost&#10;&#9;&#9;self.other = other&#10;&#9;&#9;self.link = link&#10;&#10;def rm_main(data):&#10;&#9;culturaEvents = []&#10;&#9;cultura = json.load(data)&#10;&#9;for day in cultura['result']['events']:&#10;&#9;&#9;for eventType in day['tipo_evento']:&#10;&#9;&#9;&#9;for event in eventType['events']:&#10;&#9;&#9;&#9;&#9;subSubCategory = &quot;&quot;&#10;&#9;&#9;&#9;&#9;for subType in event['tipo_evento']:&#10;&#9;&#9;&#9;&#9;&#9;if subType['name'] is not None:&#10;&#9;&#9;&#9;&#9;&#9;&#9;subSubCategory += subType['name'] + &quot;,&quot;&#10;&#9;&#9;&#9;&#9;if len(event['luogo_della_cultura']) == 0:&#10;&#9;&#9;&#9;&#9;&#9;event['luogo_della_cultura'].append({&#10;&#9;&#9;&#9;&#9;&#9;&#9;&quot;name&quot;: &quot;&quot;&#10;&#9;&#9;&#9;&#9;&#9;})&#10;&#9;&#9;&#9;&#9;culturaEvents.append(eventObj(&#10;&#9;&#9;&#9;&#9;&#9;&#9;source=&quot;cultura&quot;,&#10;&#9;&#9;&#9;&#9;&#9;&#9;category=&quot;Cultural&quot;,&#10;&#9;&#9;&#9;&#9;&#9;&#9;subCategory=eventType['name'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;subSubCategory=subSubCategory,&#10;&#9;&#9;&#9;&#9;&#9;&#9;title=event['name'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;link=event['href'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;date=day['day']['identifier'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;time=event['orario_svolgimento'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;locationName=event['comune'][0]['name'] + &quot; --SELF-- &quot; + event['luogo_svolgimento'] + &quot; --SELF-- &quot; +&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9; event['luogo_della_cultura'][0]['name'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;cost=event['costi'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;contact=event['telefono'] + &quot; --SELF-- &quot; + event['email']&#10;&#9;&#9;&#9;&#9;))&#10;&#9;culturaEvents = [ob.__dict__ for ob in culturaEvents]&#10;&#9;js = json.dumps(culturaEvents)&#10;&#9;print(js)&#10;&#9;df = pd.DataFrame(culturaEvents)&#10;&#9;&#10;&#9;return df"/>
        <parameter key="script_file" value="https://raw.githubusercontent.com/vale17accidentidellastoria/KDI-Project-FacilityDomain/master/models/script/format/cineworldTrento_format.py"/>
        <parameter key="notebook_cell_tag_filter" value=""/>
        <parameter key="use_default_python" value="true"/>
        <parameter key="package_manager" value="conda (anaconda)"/>
      </operator>
      <operator activated="true" class="python_scripting:execute_python" compatibility="9.3.001" expanded="true" height="103" name="cinemaTrento details" width="90" x="313" y="646">
        <parameter key="script" value="import pandas&#10;&#10;# rm_main is a mandatory function, &#10;# the number of arguments has to be the number of input ports (can be none)&#10;def rm_main(data):&#10;    print('Hello, world!')&#10;    # output can be found in Log View&#10;    print(type(data))&#10;&#10;    #your code goes here&#10;&#10;    #for example:&#10;    data2 = pandas.DataFrame([3,5,77,8])&#10;&#10;    # connect 2 output ports to see the results&#10;    return data, data2"/>
        <parameter key="script_file" value="https://raw.githubusercontent.com/vale17accidentidellastoria/KDI-Project-FacilityDomain/master/models/script/movieDetails/cineworldTrentoDetails.py"/>
        <parameter key="notebook_cell_tag_filter" value=""/>
        <parameter key="use_default_python" value="true"/>
        <parameter key="package_manager" value="conda (anaconda)"/>
      </operator>
      <operator activated="true" class="python_scripting:execute_python" compatibility="9.3.001" expanded="true" height="103" name="cinemaTrento structure" width="90" x="447" y="646">
        <parameter key="script" value="import pandas as pd&#10;import json&#10;class eventObj:&#10;&#9;def __init__(self, title=&quot;&quot;, category=&quot;&quot;, subCategory=&quot;&quot;, date=&quot;&quot;, time=&quot;&quot;, locationName=&quot;&quot;, locationURL=&quot;&quot;,&#10;&#9;&#9;&#9;&#9; suitableFor=&quot;&quot;, source=&quot;&quot;, description=&quot;&quot;, other=&quot;&quot;, contact=&quot;&quot;, cost=&quot;&quot;, link=&quot;&quot;, subSubCategory=&quot;&quot;):&#10;&#9;&#9;self.source = source&#10;&#9;&#9;self.category = category&#10;&#9;&#9;self.subCategory = subCategory&#10;&#9;&#9;self.subSubCategory = subSubCategory&#10;&#9;&#9;self.suitableFor = suitableFor&#10;&#9;&#9;self.title = title&#10;&#9;&#9;self.date = date&#10;&#9;&#9;self.time = time&#10;&#9;&#9;self.locationName = locationName&#10;&#9;&#9;self.locationURL = locationURL&#10;&#9;&#9;self.description = description&#10;&#9;&#9;self.contact = contact&#10;&#9;&#9;self.cost = cost&#10;&#9;&#9;self.other = other&#10;&#9;&#9;self.link = link&#10;&#10;def rm_main(data):&#10;&#9;culturaEvents = []&#10;&#9;cultura = json.load(data)&#10;&#9;for day in cultura['result']['events']:&#10;&#9;&#9;for eventType in day['tipo_evento']:&#10;&#9;&#9;&#9;for event in eventType['events']:&#10;&#9;&#9;&#9;&#9;subSubCategory = &quot;&quot;&#10;&#9;&#9;&#9;&#9;for subType in event['tipo_evento']:&#10;&#9;&#9;&#9;&#9;&#9;if subType['name'] is not None:&#10;&#9;&#9;&#9;&#9;&#9;&#9;subSubCategory += subType['name'] + &quot;,&quot;&#10;&#9;&#9;&#9;&#9;if len(event['luogo_della_cultura']) == 0:&#10;&#9;&#9;&#9;&#9;&#9;event['luogo_della_cultura'].append({&#10;&#9;&#9;&#9;&#9;&#9;&#9;&quot;name&quot;: &quot;&quot;&#10;&#9;&#9;&#9;&#9;&#9;})&#10;&#9;&#9;&#9;&#9;culturaEvents.append(eventObj(&#10;&#9;&#9;&#9;&#9;&#9;&#9;source=&quot;cultura&quot;,&#10;&#9;&#9;&#9;&#9;&#9;&#9;category=&quot;Cultural&quot;,&#10;&#9;&#9;&#9;&#9;&#9;&#9;subCategory=eventType['name'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;subSubCategory=subSubCategory,&#10;&#9;&#9;&#9;&#9;&#9;&#9;title=event['name'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;link=event['href'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;date=day['day']['identifier'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;time=event['orario_svolgimento'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;locationName=event['comune'][0]['name'] + &quot; --SELF-- &quot; + event['luogo_svolgimento'] + &quot; --SELF-- &quot; +&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9; event['luogo_della_cultura'][0]['name'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;cost=event['costi'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;contact=event['telefono'] + &quot; --SELF-- &quot; + event['email']&#10;&#9;&#9;&#9;&#9;))&#10;&#9;culturaEvents = [ob.__dict__ for ob in culturaEvents]&#10;&#9;js = json.dumps(culturaEvents)&#10;&#9;print(js)&#10;&#9;df = pd.DataFrame(culturaEvents)&#10;&#9;&#10;&#9;return df"/>
        <parameter key="script_file" value="https://raw.githubusercontent.com/vale17accidentidellastoria/KDI-Project-FacilityDomain/master/models/script/structure/cineworldTrento.py"/>
        <parameter key="notebook_cell_tag_filter" value=""/>
        <parameter key="use_default_python" value="true"/>
        <parameter key="package_manager" value="conda (anaconda)"/>
      </operator>
      <operator activated="true" class="python_scripting:execute_python" compatibility="9.3.001" expanded="true" height="82" name="muse extract" width="90" x="45" y="238">
        <parameter key="script" value="import pandas as pd&#10;import json&#10;class eventObj:&#10;&#9;def __init__(self, title=&quot;&quot;, category=&quot;&quot;, subCategory=&quot;&quot;, date=&quot;&quot;, time=&quot;&quot;, locationName=&quot;&quot;, locationURL=&quot;&quot;,&#10;&#9;&#9;&#9;&#9; suitableFor=&quot;&quot;, source=&quot;&quot;, description=&quot;&quot;, other=&quot;&quot;, contact=&quot;&quot;, cost=&quot;&quot;, link=&quot;&quot;, subSubCategory=&quot;&quot;):&#10;&#9;&#9;self.source = source&#10;&#9;&#9;self.category = category&#10;&#9;&#9;self.subCategory = subCategory&#10;&#9;&#9;self.subSubCategory = subSubCategory&#10;&#9;&#9;self.suitableFor = suitableFor&#10;&#9;&#9;self.title = title&#10;&#9;&#9;self.date = date&#10;&#9;&#9;self.time = time&#10;&#9;&#9;self.locationName = locationName&#10;&#9;&#9;self.locationURL = locationURL&#10;&#9;&#9;self.description = description&#10;&#9;&#9;self.contact = contact&#10;&#9;&#9;self.cost = cost&#10;&#9;&#9;self.other = other&#10;&#9;&#9;self.link = link&#10;&#10;def rm_main(data):&#10;&#9;culturaEvents = []&#10;&#9;cultura = json.load(data)&#10;&#9;for day in cultura['result']['events']:&#10;&#9;&#9;for eventType in day['tipo_evento']:&#10;&#9;&#9;&#9;for event in eventType['events']:&#10;&#9;&#9;&#9;&#9;subSubCategory = &quot;&quot;&#10;&#9;&#9;&#9;&#9;for subType in event['tipo_evento']:&#10;&#9;&#9;&#9;&#9;&#9;if subType['name'] is not None:&#10;&#9;&#9;&#9;&#9;&#9;&#9;subSubCategory += subType['name'] + &quot;,&quot;&#10;&#9;&#9;&#9;&#9;if len(event['luogo_della_cultura']) == 0:&#10;&#9;&#9;&#9;&#9;&#9;event['luogo_della_cultura'].append({&#10;&#9;&#9;&#9;&#9;&#9;&#9;&quot;name&quot;: &quot;&quot;&#10;&#9;&#9;&#9;&#9;&#9;})&#10;&#9;&#9;&#9;&#9;culturaEvents.append(eventObj(&#10;&#9;&#9;&#9;&#9;&#9;&#9;source=&quot;cultura&quot;,&#10;&#9;&#9;&#9;&#9;&#9;&#9;category=&quot;Cultural&quot;,&#10;&#9;&#9;&#9;&#9;&#9;&#9;subCategory=eventType['name'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;subSubCategory=subSubCategory,&#10;&#9;&#9;&#9;&#9;&#9;&#9;title=event['name'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;link=event['href'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;date=day['day']['identifier'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;time=event['orario_svolgimento'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;locationName=event['comune'][0]['name'] + &quot; --SELF-- &quot; + event['luogo_svolgimento'] + &quot; --SELF-- &quot; +&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9; event['luogo_della_cultura'][0]['name'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;cost=event['costi'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;contact=event['telefono'] + &quot; --SELF-- &quot; + event['email']&#10;&#9;&#9;&#9;&#9;))&#10;&#9;culturaEvents = [ob.__dict__ for ob in culturaEvents]&#10;&#9;js = json.dumps(culturaEvents)&#10;&#9;print(js)&#10;&#9;df = pd.DataFrame(culturaEvents)&#10;&#9;&#10;&#9;return df"/>
        <parameter key="script_file" value="https://raw.githubusercontent.com/vale17accidentidellastoria/KDI-Project-FacilityDomain/master/models/script/extract/muse_PRE.py"/>
        <parameter key="notebook_cell_tag_filter" value=""/>
        <parameter key="use_default_python" value="true"/>
        <parameter key="package_manager" value="conda (anaconda)"/>
      </operator>
      <operator activated="true" class="python_scripting:execute_python" compatibility="9.3.001" expanded="true" height="103" name="muse format" width="90" x="179" y="238">
        <parameter key="script" value="import pandas as pd&#10;import json&#10;class eventObj:&#10;&#9;def __init__(self, title=&quot;&quot;, category=&quot;&quot;, subCategory=&quot;&quot;, date=&quot;&quot;, time=&quot;&quot;, locationName=&quot;&quot;, locationURL=&quot;&quot;,&#10;&#9;&#9;&#9;&#9; suitableFor=&quot;&quot;, source=&quot;&quot;, description=&quot;&quot;, other=&quot;&quot;, contact=&quot;&quot;, cost=&quot;&quot;, link=&quot;&quot;, subSubCategory=&quot;&quot;):&#10;&#9;&#9;self.source = source&#10;&#9;&#9;self.category = category&#10;&#9;&#9;self.subCategory = subCategory&#10;&#9;&#9;self.subSubCategory = subSubCategory&#10;&#9;&#9;self.suitableFor = suitableFor&#10;&#9;&#9;self.title = title&#10;&#9;&#9;self.date = date&#10;&#9;&#9;self.time = time&#10;&#9;&#9;self.locationName = locationName&#10;&#9;&#9;self.locationURL = locationURL&#10;&#9;&#9;self.description = description&#10;&#9;&#9;self.contact = contact&#10;&#9;&#9;self.cost = cost&#10;&#9;&#9;self.other = other&#10;&#9;&#9;self.link = link&#10;&#10;def rm_main(data):&#10;&#9;culturaEvents = []&#10;&#9;cultura = json.load(data)&#10;&#9;for day in cultura['result']['events']:&#10;&#9;&#9;for eventType in day['tipo_evento']:&#10;&#9;&#9;&#9;for event in eventType['events']:&#10;&#9;&#9;&#9;&#9;subSubCategory = &quot;&quot;&#10;&#9;&#9;&#9;&#9;for subType in event['tipo_evento']:&#10;&#9;&#9;&#9;&#9;&#9;if subType['name'] is not None:&#10;&#9;&#9;&#9;&#9;&#9;&#9;subSubCategory += subType['name'] + &quot;,&quot;&#10;&#9;&#9;&#9;&#9;if len(event['luogo_della_cultura']) == 0:&#10;&#9;&#9;&#9;&#9;&#9;event['luogo_della_cultura'].append({&#10;&#9;&#9;&#9;&#9;&#9;&#9;&quot;name&quot;: &quot;&quot;&#10;&#9;&#9;&#9;&#9;&#9;})&#10;&#9;&#9;&#9;&#9;culturaEvents.append(eventObj(&#10;&#9;&#9;&#9;&#9;&#9;&#9;source=&quot;cultura&quot;,&#10;&#9;&#9;&#9;&#9;&#9;&#9;category=&quot;Cultural&quot;,&#10;&#9;&#9;&#9;&#9;&#9;&#9;subCategory=eventType['name'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;subSubCategory=subSubCategory,&#10;&#9;&#9;&#9;&#9;&#9;&#9;title=event['name'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;link=event['href'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;date=day['day']['identifier'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;time=event['orario_svolgimento'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;locationName=event['comune'][0]['name'] + &quot; --SELF-- &quot; + event['luogo_svolgimento'] + &quot; --SELF-- &quot; +&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9; event['luogo_della_cultura'][0]['name'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;cost=event['costi'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;contact=event['telefono'] + &quot; --SELF-- &quot; + event['email']&#10;&#9;&#9;&#9;&#9;))&#10;&#9;culturaEvents = [ob.__dict__ for ob in culturaEvents]&#10;&#9;js = json.dumps(culturaEvents)&#10;&#9;print(js)&#10;&#9;df = pd.DataFrame(culturaEvents)&#10;&#9;&#10;&#9;return df"/>
        <parameter key="script_file" value="https://raw.githubusercontent.com/vale17accidentidellastoria/KDI-Project-FacilityDomain/master/models/script/format/muse_format.py"/>
        <parameter key="notebook_cell_tag_filter" value=""/>
        <parameter key="use_default_python" value="true"/>
        <parameter key="package_manager" value="conda (anaconda)"/>
      </operator>
      <operator activated="true" class="python_scripting:execute_python" compatibility="9.3.001" expanded="true" height="103" name="muse structure" width="90" x="313" y="238">
        <parameter key="script" value="import pandas as pd&#10;import json&#10;class eventObj:&#10;&#9;def __init__(self, title=&quot;&quot;, category=&quot;&quot;, subCategory=&quot;&quot;, date=&quot;&quot;, time=&quot;&quot;, locationName=&quot;&quot;, locationURL=&quot;&quot;,&#10;&#9;&#9;&#9;&#9; suitableFor=&quot;&quot;, source=&quot;&quot;, description=&quot;&quot;, other=&quot;&quot;, contact=&quot;&quot;, cost=&quot;&quot;, link=&quot;&quot;, subSubCategory=&quot;&quot;):&#10;&#9;&#9;self.source = source&#10;&#9;&#9;self.category = category&#10;&#9;&#9;self.subCategory = subCategory&#10;&#9;&#9;self.subSubCategory = subSubCategory&#10;&#9;&#9;self.suitableFor = suitableFor&#10;&#9;&#9;self.title = title&#10;&#9;&#9;self.date = date&#10;&#9;&#9;self.time = time&#10;&#9;&#9;self.locationName = locationName&#10;&#9;&#9;self.locationURL = locationURL&#10;&#9;&#9;self.description = description&#10;&#9;&#9;self.contact = contact&#10;&#9;&#9;self.cost = cost&#10;&#9;&#9;self.other = other&#10;&#9;&#9;self.link = link&#10;&#10;def rm_main(data):&#10;&#9;culturaEvents = []&#10;&#9;cultura = json.load(data)&#10;&#9;for day in cultura['result']['events']:&#10;&#9;&#9;for eventType in day['tipo_evento']:&#10;&#9;&#9;&#9;for event in eventType['events']:&#10;&#9;&#9;&#9;&#9;subSubCategory = &quot;&quot;&#10;&#9;&#9;&#9;&#9;for subType in event['tipo_evento']:&#10;&#9;&#9;&#9;&#9;&#9;if subType['name'] is not None:&#10;&#9;&#9;&#9;&#9;&#9;&#9;subSubCategory += subType['name'] + &quot;,&quot;&#10;&#9;&#9;&#9;&#9;if len(event['luogo_della_cultura']) == 0:&#10;&#9;&#9;&#9;&#9;&#9;event['luogo_della_cultura'].append({&#10;&#9;&#9;&#9;&#9;&#9;&#9;&quot;name&quot;: &quot;&quot;&#10;&#9;&#9;&#9;&#9;&#9;})&#10;&#9;&#9;&#9;&#9;culturaEvents.append(eventObj(&#10;&#9;&#9;&#9;&#9;&#9;&#9;source=&quot;cultura&quot;,&#10;&#9;&#9;&#9;&#9;&#9;&#9;category=&quot;Cultural&quot;,&#10;&#9;&#9;&#9;&#9;&#9;&#9;subCategory=eventType['name'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;subSubCategory=subSubCategory,&#10;&#9;&#9;&#9;&#9;&#9;&#9;title=event['name'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;link=event['href'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;date=day['day']['identifier'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;time=event['orario_svolgimento'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;locationName=event['comune'][0]['name'] + &quot; --SELF-- &quot; + event['luogo_svolgimento'] + &quot; --SELF-- &quot; +&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9; event['luogo_della_cultura'][0]['name'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;cost=event['costi'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;contact=event['telefono'] + &quot; --SELF-- &quot; + event['email']&#10;&#9;&#9;&#9;&#9;))&#10;&#9;culturaEvents = [ob.__dict__ for ob in culturaEvents]&#10;&#9;js = json.dumps(culturaEvents)&#10;&#9;print(js)&#10;&#9;df = pd.DataFrame(culturaEvents)&#10;&#9;&#10;&#9;return df"/>
        <parameter key="script_file" value="https://raw.githubusercontent.com/vale17accidentidellastoria/KDI-Project-FacilityDomain/master/models/script/structure/muse.py"/>
        <parameter key="notebook_cell_tag_filter" value=""/>
        <parameter key="use_default_python" value="true"/>
        <parameter key="package_manager" value="conda (anaconda)"/>
      </operator>
      <operator activated="true" class="python_scripting:execute_python" compatibility="9.3.001" expanded="true" height="82" name="mart extract" width="90" x="45" y="34">
        <parameter key="script" value="import pandas as pd&#10;import json&#10;class eventObj:&#10;&#9;def __init__(self, title=&quot;&quot;, category=&quot;&quot;, subCategory=&quot;&quot;, date=&quot;&quot;, time=&quot;&quot;, locationName=&quot;&quot;, locationURL=&quot;&quot;,&#10;&#9;&#9;&#9;&#9; suitableFor=&quot;&quot;, source=&quot;&quot;, description=&quot;&quot;, other=&quot;&quot;, contact=&quot;&quot;, cost=&quot;&quot;, link=&quot;&quot;, subSubCategory=&quot;&quot;):&#10;&#9;&#9;self.source = source&#10;&#9;&#9;self.category = category&#10;&#9;&#9;self.subCategory = subCategory&#10;&#9;&#9;self.subSubCategory = subSubCategory&#10;&#9;&#9;self.suitableFor = suitableFor&#10;&#9;&#9;self.title = title&#10;&#9;&#9;self.date = date&#10;&#9;&#9;self.time = time&#10;&#9;&#9;self.locationName = locationName&#10;&#9;&#9;self.locationURL = locationURL&#10;&#9;&#9;self.description = description&#10;&#9;&#9;self.contact = contact&#10;&#9;&#9;self.cost = cost&#10;&#9;&#9;self.other = other&#10;&#9;&#9;self.link = link&#10;&#10;def rm_main(data):&#10;&#9;culturaEvents = []&#10;&#9;cultura = json.load(data)&#10;&#9;for day in cultura['result']['events']:&#10;&#9;&#9;for eventType in day['tipo_evento']:&#10;&#9;&#9;&#9;for event in eventType['events']:&#10;&#9;&#9;&#9;&#9;subSubCategory = &quot;&quot;&#10;&#9;&#9;&#9;&#9;for subType in event['tipo_evento']:&#10;&#9;&#9;&#9;&#9;&#9;if subType['name'] is not None:&#10;&#9;&#9;&#9;&#9;&#9;&#9;subSubCategory += subType['name'] + &quot;,&quot;&#10;&#9;&#9;&#9;&#9;if len(event['luogo_della_cultura']) == 0:&#10;&#9;&#9;&#9;&#9;&#9;event['luogo_della_cultura'].append({&#10;&#9;&#9;&#9;&#9;&#9;&#9;&quot;name&quot;: &quot;&quot;&#10;&#9;&#9;&#9;&#9;&#9;})&#10;&#9;&#9;&#9;&#9;culturaEvents.append(eventObj(&#10;&#9;&#9;&#9;&#9;&#9;&#9;source=&quot;cultura&quot;,&#10;&#9;&#9;&#9;&#9;&#9;&#9;category=&quot;Cultural&quot;,&#10;&#9;&#9;&#9;&#9;&#9;&#9;subCategory=eventType['name'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;subSubCategory=subSubCategory,&#10;&#9;&#9;&#9;&#9;&#9;&#9;title=event['name'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;link=event['href'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;date=day['day']['identifier'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;time=event['orario_svolgimento'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;locationName=event['comune'][0]['name'] + &quot; --SELF-- &quot; + event['luogo_svolgimento'] + &quot; --SELF-- &quot; +&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9; event['luogo_della_cultura'][0]['name'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;cost=event['costi'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;contact=event['telefono'] + &quot; --SELF-- &quot; + event['email']&#10;&#9;&#9;&#9;&#9;))&#10;&#9;culturaEvents = [ob.__dict__ for ob in culturaEvents]&#10;&#9;js = json.dumps(culturaEvents)&#10;&#9;print(js)&#10;&#9;df = pd.DataFrame(culturaEvents)&#10;&#9;&#10;&#9;return df"/>
        <parameter key="script_file" value="https://raw.githubusercontent.com/vale17accidentidellastoria/KDI-Project-FacilityDomain/master/models/script/extract/mart_PRE.py"/>
        <parameter key="notebook_cell_tag_filter" value=""/>
        <parameter key="use_default_python" value="true"/>
        <parameter key="package_manager" value="conda (anaconda)"/>
      </operator>
      <operator activated="true" class="python_scripting:execute_python" compatibility="9.3.001" expanded="true" height="103" name="mart format" width="90" x="179" y="34">
        <parameter key="script" value="import pandas as pd&#10;import json&#10;class eventObj:&#10;&#9;def __init__(self, title=&quot;&quot;, category=&quot;&quot;, subCategory=&quot;&quot;, date=&quot;&quot;, time=&quot;&quot;, locationName=&quot;&quot;, locationURL=&quot;&quot;,&#10;&#9;&#9;&#9;&#9; suitableFor=&quot;&quot;, source=&quot;&quot;, description=&quot;&quot;, other=&quot;&quot;, contact=&quot;&quot;, cost=&quot;&quot;, link=&quot;&quot;, subSubCategory=&quot;&quot;):&#10;&#9;&#9;self.source = source&#10;&#9;&#9;self.category = category&#10;&#9;&#9;self.subCategory = subCategory&#10;&#9;&#9;self.subSubCategory = subSubCategory&#10;&#9;&#9;self.suitableFor = suitableFor&#10;&#9;&#9;self.title = title&#10;&#9;&#9;self.date = date&#10;&#9;&#9;self.time = time&#10;&#9;&#9;self.locationName = locationName&#10;&#9;&#9;self.locationURL = locationURL&#10;&#9;&#9;self.description = description&#10;&#9;&#9;self.contact = contact&#10;&#9;&#9;self.cost = cost&#10;&#9;&#9;self.other = other&#10;&#9;&#9;self.link = link&#10;&#10;def rm_main(data):&#10;&#9;culturaEvents = []&#10;&#9;cultura = json.load(data)&#10;&#9;for day in cultura['result']['events']:&#10;&#9;&#9;for eventType in day['tipo_evento']:&#10;&#9;&#9;&#9;for event in eventType['events']:&#10;&#9;&#9;&#9;&#9;subSubCategory = &quot;&quot;&#10;&#9;&#9;&#9;&#9;for subType in event['tipo_evento']:&#10;&#9;&#9;&#9;&#9;&#9;if subType['name'] is not None:&#10;&#9;&#9;&#9;&#9;&#9;&#9;subSubCategory += subType['name'] + &quot;,&quot;&#10;&#9;&#9;&#9;&#9;if len(event['luogo_della_cultura']) == 0:&#10;&#9;&#9;&#9;&#9;&#9;event['luogo_della_cultura'].append({&#10;&#9;&#9;&#9;&#9;&#9;&#9;&quot;name&quot;: &quot;&quot;&#10;&#9;&#9;&#9;&#9;&#9;})&#10;&#9;&#9;&#9;&#9;culturaEvents.append(eventObj(&#10;&#9;&#9;&#9;&#9;&#9;&#9;source=&quot;cultura&quot;,&#10;&#9;&#9;&#9;&#9;&#9;&#9;category=&quot;Cultural&quot;,&#10;&#9;&#9;&#9;&#9;&#9;&#9;subCategory=eventType['name'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;subSubCategory=subSubCategory,&#10;&#9;&#9;&#9;&#9;&#9;&#9;title=event['name'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;link=event['href'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;date=day['day']['identifier'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;time=event['orario_svolgimento'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;locationName=event['comune'][0]['name'] + &quot; --SELF-- &quot; + event['luogo_svolgimento'] + &quot; --SELF-- &quot; +&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9; event['luogo_della_cultura'][0]['name'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;cost=event['costi'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;contact=event['telefono'] + &quot; --SELF-- &quot; + event['email']&#10;&#9;&#9;&#9;&#9;))&#10;&#9;culturaEvents = [ob.__dict__ for ob in culturaEvents]&#10;&#9;js = json.dumps(culturaEvents)&#10;&#9;print(js)&#10;&#9;df = pd.DataFrame(culturaEvents)&#10;&#9;&#10;&#9;return df"/>
        <parameter key="script_file" value="https://raw.githubusercontent.com/vale17accidentidellastoria/KDI-Project-FacilityDomain/master/models/script/format/mart_format.py"/>
        <parameter key="notebook_cell_tag_filter" value=""/>
        <parameter key="use_default_python" value="true"/>
        <parameter key="package_manager" value="conda (anaconda)"/>
      </operator>
      <operator activated="true" class="python_scripting:execute_python" compatibility="9.3.001" expanded="true" height="103" name="mart structure" width="90" x="313" y="34">
        <parameter key="script" value="import pandas as pd&#10;import json&#10;class eventObj:&#10;&#9;def __init__(self, title=&quot;&quot;, category=&quot;&quot;, subCategory=&quot;&quot;, date=&quot;&quot;, time=&quot;&quot;, locationName=&quot;&quot;, locationURL=&quot;&quot;,&#10;&#9;&#9;&#9;&#9; suitableFor=&quot;&quot;, source=&quot;&quot;, description=&quot;&quot;, other=&quot;&quot;, contact=&quot;&quot;, cost=&quot;&quot;, link=&quot;&quot;, subSubCategory=&quot;&quot;):&#10;&#9;&#9;self.source = source&#10;&#9;&#9;self.category = category&#10;&#9;&#9;self.subCategory = subCategory&#10;&#9;&#9;self.subSubCategory = subSubCategory&#10;&#9;&#9;self.suitableFor = suitableFor&#10;&#9;&#9;self.title = title&#10;&#9;&#9;self.date = date&#10;&#9;&#9;self.time = time&#10;&#9;&#9;self.locationName = locationName&#10;&#9;&#9;self.locationURL = locationURL&#10;&#9;&#9;self.description = description&#10;&#9;&#9;self.contact = contact&#10;&#9;&#9;self.cost = cost&#10;&#9;&#9;self.other = other&#10;&#9;&#9;self.link = link&#10;&#10;def rm_main(data):&#10;&#9;culturaEvents = []&#10;&#9;cultura = json.load(data)&#10;&#9;for day in cultura['result']['events']:&#10;&#9;&#9;for eventType in day['tipo_evento']:&#10;&#9;&#9;&#9;for event in eventType['events']:&#10;&#9;&#9;&#9;&#9;subSubCategory = &quot;&quot;&#10;&#9;&#9;&#9;&#9;for subType in event['tipo_evento']:&#10;&#9;&#9;&#9;&#9;&#9;if subType['name'] is not None:&#10;&#9;&#9;&#9;&#9;&#9;&#9;subSubCategory += subType['name'] + &quot;,&quot;&#10;&#9;&#9;&#9;&#9;if len(event['luogo_della_cultura']) == 0:&#10;&#9;&#9;&#9;&#9;&#9;event['luogo_della_cultura'].append({&#10;&#9;&#9;&#9;&#9;&#9;&#9;&quot;name&quot;: &quot;&quot;&#10;&#9;&#9;&#9;&#9;&#9;})&#10;&#9;&#9;&#9;&#9;culturaEvents.append(eventObj(&#10;&#9;&#9;&#9;&#9;&#9;&#9;source=&quot;cultura&quot;,&#10;&#9;&#9;&#9;&#9;&#9;&#9;category=&quot;Cultural&quot;,&#10;&#9;&#9;&#9;&#9;&#9;&#9;subCategory=eventType['name'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;subSubCategory=subSubCategory,&#10;&#9;&#9;&#9;&#9;&#9;&#9;title=event['name'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;link=event['href'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;date=day['day']['identifier'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;time=event['orario_svolgimento'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;locationName=event['comune'][0]['name'] + &quot; --SELF-- &quot; + event['luogo_svolgimento'] + &quot; --SELF-- &quot; +&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9; event['luogo_della_cultura'][0]['name'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;cost=event['costi'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;contact=event['telefono'] + &quot; --SELF-- &quot; + event['email']&#10;&#9;&#9;&#9;&#9;))&#10;&#9;culturaEvents = [ob.__dict__ for ob in culturaEvents]&#10;&#9;js = json.dumps(culturaEvents)&#10;&#9;print(js)&#10;&#9;df = pd.DataFrame(culturaEvents)&#10;&#9;&#10;&#9;return df"/>
        <parameter key="script_file" value="https://raw.githubusercontent.com/vale17accidentidellastoria/KDI-Project-FacilityDomain/master/models/script/structure/mart.py"/>
        <parameter key="notebook_cell_tag_filter" value=""/>
        <parameter key="use_default_python" value="true"/>
        <parameter key="package_manager" value="conda (anaconda)"/>
      </operator>
      <operator activated="true" class="python_scripting:execute_python" compatibility="9.3.001" expanded="true" height="229" name="Merge" width="90" x="581" y="187">
        <parameter key="script" value="import pandas as pd&#10;import json&#10;class eventObj:&#10;&#9;def __init__(self, title=&quot;&quot;, category=&quot;&quot;, subCategory=&quot;&quot;, date=&quot;&quot;, time=&quot;&quot;, locationName=&quot;&quot;, locationURL=&quot;&quot;,&#10;&#9;&#9;&#9;&#9; suitableFor=&quot;&quot;, source=&quot;&quot;, description=&quot;&quot;, other=&quot;&quot;, contact=&quot;&quot;, cost=&quot;&quot;, link=&quot;&quot;, subSubCategory=&quot;&quot;):&#10;&#9;&#9;self.source = source&#10;&#9;&#9;self.category = category&#10;&#9;&#9;self.subCategory = subCategory&#10;&#9;&#9;self.subSubCategory = subSubCategory&#10;&#9;&#9;self.suitableFor = suitableFor&#10;&#9;&#9;self.title = title&#10;&#9;&#9;self.date = date&#10;&#9;&#9;self.time = time&#10;&#9;&#9;self.locationName = locationName&#10;&#9;&#9;self.locationURL = locationURL&#10;&#9;&#9;self.description = description&#10;&#9;&#9;self.contact = contact&#10;&#9;&#9;self.cost = cost&#10;&#9;&#9;self.other = other&#10;&#9;&#9;self.link = link&#10;&#10;def rm_main(data):&#10;&#9;culturaEvents = []&#10;&#9;cultura = json.load(data)&#10;&#9;for day in cultura['result']['events']:&#10;&#9;&#9;for eventType in day['tipo_evento']:&#10;&#9;&#9;&#9;for event in eventType['events']:&#10;&#9;&#9;&#9;&#9;subSubCategory = &quot;&quot;&#10;&#9;&#9;&#9;&#9;for subType in event['tipo_evento']:&#10;&#9;&#9;&#9;&#9;&#9;if subType['name'] is not None:&#10;&#9;&#9;&#9;&#9;&#9;&#9;subSubCategory += subType['name'] + &quot;,&quot;&#10;&#9;&#9;&#9;&#9;if len(event['luogo_della_cultura']) == 0:&#10;&#9;&#9;&#9;&#9;&#9;event['luogo_della_cultura'].append({&#10;&#9;&#9;&#9;&#9;&#9;&#9;&quot;name&quot;: &quot;&quot;&#10;&#9;&#9;&#9;&#9;&#9;})&#10;&#9;&#9;&#9;&#9;culturaEvents.append(eventObj(&#10;&#9;&#9;&#9;&#9;&#9;&#9;source=&quot;cultura&quot;,&#10;&#9;&#9;&#9;&#9;&#9;&#9;category=&quot;Cultural&quot;,&#10;&#9;&#9;&#9;&#9;&#9;&#9;subCategory=eventType['name'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;subSubCategory=subSubCategory,&#10;&#9;&#9;&#9;&#9;&#9;&#9;title=event['name'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;link=event['href'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;date=day['day']['identifier'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;time=event['orario_svolgimento'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;locationName=event['comune'][0]['name'] + &quot; --SELF-- &quot; + event['luogo_svolgimento'] + &quot; --SELF-- &quot; +&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9; event['luogo_della_cultura'][0]['name'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;cost=event['costi'],&#10;&#9;&#9;&#9;&#9;&#9;&#9;contact=event['telefono'] + &quot; --SELF-- &quot; + event['email']&#10;&#9;&#9;&#9;&#9;))&#10;&#9;culturaEvents = [ob.__dict__ for ob in culturaEvents]&#10;&#9;js = json.dumps(culturaEvents)&#10;&#9;print(js)&#10;&#9;df = pd.DataFrame(culturaEvents)&#10;&#9;&#10;&#9;return df"/>
        <parameter key="script_file" value="https://raw.githubusercontent.com/vale17accidentidellastoria/KDI-Project-FacilityDomain/master/models/script/merge/merge.py"/>
        <parameter key="notebook_cell_tag_filter" value=""/>
        <parameter key="use_default_python" value="true"/>
        <parameter key="package_manager" value="conda (anaconda)"/>
      </operator>
      <operator activated="true" class="python_scripting:execute_python" compatibility="9.3.001" expanded="true" height="103" name="Geocoding" width="90" x="715" y="238">
        <parameter key="script" value="import pandas&#10;&#10;# rm_main is a mandatory function, &#10;# the number of arguments has to be the number of input ports (can be none)&#10;def rm_main(data):&#10;    print('Hello, world!')&#10;    # output can be found in Log View&#10;    print(type(data))&#10;&#10;    #your code goes here&#10;&#10;    #for example:&#10;    data2 = pandas.DataFrame([3,5,77,8])&#10;&#10;    # connect 2 output ports to see the results&#10;    return data, data2"/>
        <parameter key="script_file" value="https://raw.githubusercontent.com/vale17accidentidellastoria/KDI-Project-FacilityDomain/master/models/script/locations/google_places.py"/>
        <parameter key="notebook_cell_tag_filter" value=""/>
        <parameter key="use_default_python" value="true"/>
        <parameter key="package_manager" value="conda (anaconda)"/>
      </operator>
      <operator activated="true" class="python_scripting:execute_python" compatibility="9.3.001" expanded="true" height="250" name="Split and save" width="90" x="849" y="187">
        <parameter key="script" value="import pandas&#10;&#10;# rm_main is a mandatory function, &#10;# the number of arguments has to be the number of input ports (can be none)&#10;def rm_main(data):&#10;    print('Hello, world!')&#10;    # output can be found in Log View&#10;    print(type(data))&#10;&#10;    #your code goes here&#10;&#10;    #for example:&#10;    data2 = pandas.DataFrame([3,5,77,8])&#10;&#10;    # connect 2 output ports to see the results&#10;    return data, data2"/>
        <parameter key="script_file" value="https://raw.githubusercontent.com/vale17accidentidellastoria/KDI-Project-FacilityDomain/master/models/script/merge/split_save.py"/>
        <parameter key="notebook_cell_tag_filter" value=""/>
        <parameter key="use_default_python" value="true"/>
        <parameter key="package_manager" value="conda (anaconda)"/>
      </operator>
      <operator activated="true" class="multiply" compatibility="9.5.001" expanded="true" height="103" name="General" width="90" x="983" y="85"/>
      <operator activated="true" class="write_csv" compatibility="9.5.001" expanded="true" height="82" name="General csv" width="90" x="1117" y="136">
        <parameter key="csv_file" value="/output/general.csv"/>
        <parameter key="column_separator" value=","/>
        <parameter key="write_attribute_names" value="true"/>
        <parameter key="quote_nominal_values" value="true"/>
        <parameter key="format_date_attributes" value="true"/>
        <parameter key="append_to_file" value="false"/>
        <parameter key="encoding" value="UTF-8"/>
      </operator>
      <operator activated="true" class="multiply" compatibility="9.5.001" expanded="true" height="103" name="Science" width="90" x="1251" y="187"/>
      <operator activated="true" class="write_csv" compatibility="9.5.001" expanded="true" height="82" name="Science csv" width="90" x="1385" y="238">
        <parameter key="csv_file" value="/output/science.csv"/>
        <parameter key="column_separator" value=","/>
        <parameter key="write_attribute_names" value="true"/>
        <parameter key="quote_nominal_values" value="true"/>
        <parameter key="format_date_attributes" value="true"/>
        <parameter key="append_to_file" value="false"/>
        <parameter key="encoding" value="UTF-8"/>
      </operator>
      <operator activated="true" class="multiply" compatibility="9.5.001" expanded="true" height="103" name="Visual" width="90" x="983" y="187"/>
      <operator activated="true" class="write_csv" compatibility="9.5.001" expanded="true" height="82" name="Visual csv" width="90" x="1117" y="238">
        <parameter key="csv_file" value="/output/visual.csv"/>
        <parameter key="column_separator" value=","/>
        <parameter key="write_attribute_names" value="true"/>
        <parameter key="quote_nominal_values" value="true"/>
        <parameter key="format_date_attributes" value="true"/>
        <parameter key="append_to_file" value="false"/>
        <parameter key="encoding" value="UTF-8"/>
      </operator>
      <operator activated="true" class="multiply" compatibility="9.5.001" expanded="true" height="103" name="Music" width="90" x="1251" y="289"/>
      <operator activated="true" class="write_csv" compatibility="9.5.001" expanded="true" height="82" name="Music csv" width="90" x="1385" y="340">
        <parameter key="csv_file" value="/output/music.csv"/>
        <parameter key="column_separator" value=","/>
        <parameter key="write_attribute_names" value="true"/>
        <parameter key="quote_nominal_values" value="true"/>
        <parameter key="format_date_attributes" value="true"/>
        <parameter key="append_to_file" value="false"/>
        <parameter key="encoding" value="UTF-8"/>
      </operator>
      <operator activated="true" class="multiply" compatibility="9.5.001" expanded="true" height="103" name="Screen" width="90" x="983" y="289"/>
      <operator activated="true" class="write_csv" compatibility="9.5.001" expanded="true" height="82" name="Screen csv" width="90" x="1117" y="340">
        <parameter key="csv_file" value="/output/screen.csv"/>
        <parameter key="column_separator" value=","/>
        <parameter key="write_attribute_names" value="true"/>
        <parameter key="quote_nominal_values" value="true"/>
        <parameter key="format_date_attributes" value="true"/>
        <parameter key="append_to_file" value="false"/>
        <parameter key="encoding" value="UTF-8"/>
      </operator>
      <operator activated="true" class="multiply" compatibility="9.5.001" expanded="true" height="103" name="Theatre" width="90" x="1251" y="391"/>
      <operator activated="true" class="write_csv" compatibility="9.5.001" expanded="true" height="82" name="Theatre csv" width="90" x="1385" y="442">
        <parameter key="csv_file" value="/output/theatre.csv"/>
        <parameter key="column_separator" value=","/>
        <parameter key="write_attribute_names" value="true"/>
        <parameter key="quote_nominal_values" value="true"/>
        <parameter key="format_date_attributes" value="true"/>
        <parameter key="append_to_file" value="false"/>
        <parameter key="encoding" value="UTF-8"/>
      </operator>
      <operator activated="true" class="multiply" compatibility="9.5.001" expanded="true" height="103" name="Talk" width="90" x="983" y="391"/>
      <operator activated="true" class="write_csv" compatibility="9.5.001" expanded="true" height="82" name="Talk csv" width="90" x="1117" y="442">
        <parameter key="csv_file" value="/output/talk.csv"/>
        <parameter key="column_separator" value=","/>
        <parameter key="write_attribute_names" value="true"/>
        <parameter key="quote_nominal_values" value="true"/>
        <parameter key="format_date_attributes" value="true"/>
        <parameter key="append_to_file" value="false"/>
        <parameter key="encoding" value="UTF-8"/>
      </operator>
      <operator activated="true" class="multiply" compatibility="9.5.001" expanded="true" height="103" name="Facilities" width="90" x="1251" y="493"/>
      <operator activated="true" class="write_csv" compatibility="9.5.001" expanded="true" height="82" name="Facilities csv" width="90" x="1385" y="544">
        <parameter key="csv_file" value="/output/facilities.csv"/>
        <parameter key="column_separator" value=","/>
        <parameter key="write_attribute_names" value="true"/>
        <parameter key="quote_nominal_values" value="true"/>
        <parameter key="format_date_attributes" value="true"/>
        <parameter key="append_to_file" value="false"/>
        <parameter key="encoding" value="UTF-8"/>
      </operator>
      <operator activated="true" class="multiply" compatibility="9.5.001" expanded="true" height="103" name="Creative_movies" width="90" x="983" y="493"/>
      <operator activated="true" class="write_csv" compatibility="9.5.001" expanded="true" height="82" name="Creative_movies csv" width="90" x="1117" y="544">
        <parameter key="csv_file" value="/output/creative_movies.csv"/>
        <parameter key="column_separator" value=","/>
        <parameter key="write_attribute_names" value="true"/>
        <parameter key="quote_nominal_values" value="true"/>
        <parameter key="format_date_attributes" value="true"/>
        <parameter key="append_to_file" value="false"/>
        <parameter key="encoding" value="UTF-8"/>
      </operator>
      <connect from_op="trentoToday extract" from_port="output 1" to_op="trentoToday format" to_port="input 1"/>
      <connect from_op="cultura extract" from_port="output 1" to_op="cultura format" to_port="input 1"/>
      <connect from_op="cultura format" from_port="output 1" to_op="cultura structure" to_port="input 1"/>
      <connect from_op="cultura structure" from_port="output 1" to_op="Merge" to_port="input 7"/>
      <connect from_op="trentoToday format" from_port="output 1" to_op="trentoToday structure" to_port="input 1"/>
      <connect from_op="trentoToday structure" from_port="output 1" to_op="Merge" to_port="input 3"/>
      <connect from_op="visitTrentino extract" from_port="output 1" to_op="visitTrentino format" to_port="input 1"/>
      <connect from_op="visitTrentino format" from_port="output 1" to_op="visitTrentino structure" to_port="input 1"/>
      <connect from_op="visitTrentino structure" from_port="output 1" to_op="Merge" to_port="input 4"/>
      <connect from_op="cinemaRovereto extract" from_port="output 1" to_op="cinemaRovereto format" to_port="input 1"/>
      <connect from_op="cinemaRovereto format" from_port="output 1" to_op="cinemaRovereto details" to_port="input 1"/>
      <connect from_op="cinemaRovereto details" from_port="output 1" to_op="cinemaRovereto structure" to_port="input 1"/>
      <connect from_op="cinemaRovereto structure" from_port="output 1" to_op="Merge" to_port="input 5"/>
      <connect from_op="cinemaTrento extract" from_port="output 1" to_op="cinemaTrento format" to_port="input 1"/>
      <connect from_op="cinemaTrento format" from_port="output 1" to_op="cinemaTrento details" to_port="input 1"/>
      <connect from_op="cinemaTrento details" from_port="output 1" to_op="cinemaTrento structure" to_port="input 1"/>
      <connect from_op="cinemaTrento structure" from_port="output 1" to_op="Merge" to_port="input 6"/>
      <connect from_op="muse extract" from_port="output 1" to_op="muse format" to_port="input 1"/>
      <connect from_op="muse format" from_port="output 1" to_op="muse structure" to_port="input 1"/>
      <connect from_op="muse structure" from_port="output 1" to_op="Merge" to_port="input 2"/>
      <connect from_op="mart extract" from_port="output 1" to_op="mart format" to_port="input 1"/>
      <connect from_op="mart format" from_port="output 1" to_op="mart structure" to_port="input 1"/>
      <connect from_op="mart structure" from_port="output 1" to_op="Merge" to_port="input 1"/>
      <connect from_op="Merge" from_port="output 1" to_op="Geocoding" to_port="input 1"/>
      <connect from_op="Geocoding" from_port="output 1" to_op="Split and save" to_port="input 1"/>
      <connect from_op="Split and save" from_port="output 1" to_op="General" to_port="input"/>
      <connect from_op="Split and save" from_port="output 2" to_op="Science" to_port="input"/>
      <connect from_op="Split and save" from_port="output 3" to_op="Visual" to_port="input"/>
      <connect from_op="Split and save" from_port="output 4" to_op="Music" to_port="input"/>
      <connect from_op="Split and save" from_port="output 5" to_op="Screen" to_port="input"/>
      <connect from_op="Split and save" from_port="output 6" to_op="Theatre" to_port="input"/>
      <connect from_op="Split and save" from_port="output 7" to_op="Talk" to_port="input"/>
      <connect from_op="Split and save" from_port="output 8" to_op="Facilities" to_port="input"/>
      <connect from_op="Split and save" from_port="output 9" to_op="Creative_movies" to_port="input"/>
      <connect from_op="General" from_port="output 1" to_port="result 1"/>
      <connect from_op="General" from_port="output 2" to_op="General csv" to_port="input"/>
      <connect from_op="Science" from_port="output 1" to_port="result 2"/>
      <connect from_op="Science" from_port="output 2" to_op="Science csv" to_port="input"/>
      <connect from_op="Visual" from_port="output 1" to_op="Visual csv" to_port="input"/>
      <connect from_op="Visual" from_port="output 2" to_port="result 3"/>
      <connect from_op="Music" from_port="output 1" to_op="Music csv" to_port="input"/>
      <connect from_op="Music" from_port="output 2" to_port="result 4"/>
      <connect from_op="Screen" from_port="output 1" to_op="Screen csv" to_port="input"/>
      <connect from_op="Screen" from_port="output 2" to_port="result 5"/>
      <connect from_op="Theatre" from_port="output 1" to_op="Theatre csv" to_port="input"/>
      <connect from_op="Theatre" from_port="output 2" to_port="result 6"/>
      <connect from_op="Talk" from_port="output 1" to_op="Talk csv" to_port="input"/>
      <connect from_op="Talk" from_port="output 2" to_port="result 7"/>
      <connect from_op="Facilities" from_port="output 1" to_op="Facilities csv" to_port="input"/>
      <connect from_op="Facilities" from_port="output 2" to_port="result 8"/>
      <connect from_op="Creative_movies" from_port="output 1" to_op="Creative_movies csv" to_port="input"/>
      <connect from_op="Creative_movies" from_port="output 2" to_port="result 9"/>
      <portSpacing port="source_input 1" spacing="0"/>
      <portSpacing port="sink_result 1" spacing="0"/>
      <portSpacing port="sink_result 2" spacing="0"/>
      <portSpacing port="sink_result 3" spacing="0"/>
      <portSpacing port="sink_result 4" spacing="0"/>
      <portSpacing port="sink_result 5" spacing="0"/>
      <portSpacing port="sink_result 6" spacing="0"/>
      <portSpacing port="sink_result 7" spacing="0"/>
      <portSpacing port="sink_result 8" spacing="0"/>
      <portSpacing port="sink_result 9" spacing="0"/>
      <portSpacing port="sink_result 10" spacing="0"/>
    </process>
  </operator>
</process>
